{
    "version": "https://jsonfeed.org/version/1",
    "title": "何妨吟啸且徐行 • All posts by \"ci cd linux\" tag",
    "description": "",
    "home_page_url": "https://fanlu.top",
    "items": [
        {
            "id": "https://fanlu.top/2023/06/19/CI/Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/",
            "url": "https://fanlu.top/2023/06/19/CI/Hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/",
            "title": "Hexo博客自动部署",
            "date_published": "2023-06-19T13:56:14.000Z",
            "content_html": "<h2 id=\"简单介绍\"><a class=\"markdownIt-Anchor\" href=\"#简单介绍\">#</a> 简单介绍</h2>\n<p>Hexo 博客是一个非常好用的静态博客，之前也部署过一阵，后来换了 halo，但是遇到了服务器崩溃，丢了一些数据，现在又换回了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv\"> Hexo</span>.</p>\n<h2 id=\"hexo的部署\"><a class=\"markdownIt-Anchor\" href=\"#hexo的部署\">#</a> hexo 的部署</h2>\n<h3 id=\"github-pages\"><a class=\"markdownIt-Anchor\" href=\"#github-pages\">#</a> github pages</h3>\n<p>github 提供了免费的静态网页托管服务，可以将 github repo 作为静态网站的部署源码。<br>\n同时将 repo 名设置为 yourname.github.io 就可以通过这个域名访问到自己的静态网站。</p>\n<h3 id=\"以前\"><a class=\"markdownIt-Anchor\" href=\"#以前\">#</a> 以前</h3>\n<p>之前使用 hexo 的时候，只能在本地通过 <code>hexo g</code>  命令生成静态资源，然后将静态资源提交到 yourname.github.io 这个 repo 中来完成部署。</p>\n<h3 id=\"现在\"><a class=\"markdownIt-Anchor\" href=\"#现在\">#</a> 现在</h3>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvZ2l0aHViLXBhZ2Vz\">https://hexo.io/zh-cn/docs/github-pages</span></p>\n</blockquote>\n<p>得益于 github action 功能的强大，hexo 提供了 pages.yml，有了这个 action 工作流，就可以将整个博客 hexo 项目源代码上传到项目中，避免了源码和生成的静态网站需要分开放的麻烦。</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Pages  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">-</span> main <span class=\"token comment\"># default branch  </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">pages</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">permissions</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token key atrule\">contents</span><span class=\"token punctuation\">:</span> write  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Use Node.js 16.x  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>node@v2  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token key atrule\">node-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"16\"</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Cache NPM dependencies  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/cache@v2  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> node_modules  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> $&lt;<span class=\"token tag\">!--swig</span>￼0<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">-</span>npm<span class=\"token punctuation\">-</span>cache  </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token key atrule\">restore-keys</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            $-npm-cache  </span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Install Dependencies  </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm install  </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> npm run build  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> peaceiris/actions<span class=\"token punctuation\">-</span>gh<span class=\"token punctuation\">-</span>pages@v3  </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          <span class=\"token key atrule\">github_token</span><span class=\"token punctuation\">:</span> $&lt;<span class=\"token tag\">!--swig</span>￼2<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span><span class=\"token scalar string\">  </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          publish_dir: ./public</span></pre></td></tr></table></figure><p>首先，配置文件中定义了一个工作流（workflow）名为 &quot;Pages&quot;。这个工作流将在推送（push）事件发生时触发执行，但仅限于 &quot;main&quot; 分支。</p>\n<p>工作流中包含一个作业（job）名为 &quot;pages&quot;，它将在最新的 Ubuntu 操作系统上运行。权限设置为 <code>contents: write</code>  表示此作业需要写入文件的权限。</p>\n<p>该作业由多个步骤（steps）组成：</p>\n<ol>\n<li>\n<p><code>actions/checkout@v2</code> ：使用这个步骤来检出代码库的最新版本到工作目录中，以便后续步骤可以访问代码。</p>\n</li>\n<li>\n<p><code>actions/setup-node@v2</code> ：这个步骤用于设置 Node.js 的环境，指定了要使用的 Node.js 版本为 16.x。</p>\n</li>\n<li>\n<p><code>actions/cache@v2</code> ：使用此步骤来缓存 NPM 依赖项，以便在后续构建过程中可以快速恢复。缓存路径为 node_modules，缓存键（key）使用了与操作系统相关的唯一标识符。</p>\n</li>\n<li>\n<p><code>npm install</code> ：这个步骤执行 npm install 命令，安装项目所需的依赖项。</p>\n</li>\n<li>\n<p><code>npm run build</code> ：此步骤运行 npm run build 命令，用于构建静态网站。</p>\n</li>\n<li>\n<p><code>peaceiris/actions-gh-pages@v3</code> ：最后一个步骤使用了一个名为 &quot;peaceiris/actions-gh-pages&quot; 的第三方 GitHub Action。这个 Action 用于将构建后的静态网站发布到 GitHub Pages。它使用了 <code>$&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</code>  作为 GitHub API 的访问令牌，并指定了发布目录为 &quot;./public&quot;。</p>\n</li>\n</ol>\n<p>通过这个配置文件，当推送到 &quot;main&quot; 分支时，GitHub Actions 将自动执行这个工作流，检出代码，安装依赖，构建网站，并将构建后的内容发布到 GitHub Pages 上。这样就实现了自动化的静态网站部署过程。</p>\n<p>部署完成后，静态网站就在 gh-pages 这个分支。</p>\n<h2 id=\"在自己的服务器部署hexo\"><a class=\"markdownIt-Anchor\" href=\"#在自己的服务器部署hexo\">#</a> 在自己的服务器部署 hexo</h2>\n<p>因为有自己的云服务器，有自己的域名，都很便宜，闲着也是闲着，也没有做个网站的想法，就用来部署自己的博客好了。</p>\n<ol>\n<li>安装 nginx</li>\n<li>拉取博客代码：<br>\n <code>https://github.com/FanLu1994/fanlu1994.github.io.git</code></li>\n<li>构建博客静态网站<br>\n <code>hexo g</code></li>\n<li>配置 nginx</li>\n</ol>\n<pre><code class=\"language-conf\">server &#123;\n        listen       443 ssl http2;\n        listen       [::]:443 ssl http2;\n        server_name  www.fanlu.top;\n        root         /root/Blog/public;\n\n\t\tlocation / &#123;\n\t\t\troot /home/xiamu/code/Blog/public;\n\t\t&#125;\n&#125;\n</code></pre>\n<p>其中 /home/xiamu/code/Blog/public 是生成后博客的静态代码地址<br>\n 5. 脚本部署</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ~/code/Blog</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">max_retries</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">retry_count</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">success</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 毕竟腾讯云在国内，访问 github 失灵时不灵，所以这里多尝试几次</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$retry_count</span> <span class=\"token parameter variable\">-lt</span> <span class=\"token variable\">$max_retries</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$success</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Attempting to pull Git code (Attempt: <span class=\"token variable\"><span class=\"token variable\">$((</span>retry_count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token variable\">))</span></span>)\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">git</span> pull</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token assign-left variable\">success</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Git pull successful\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token assign-left variable\">retry_count</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>retry_count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token variable\">))</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Git pull failed. Retrying...\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$success</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Git pull failed after <span class=\"token variable\">$max_retries</span> attempts\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>hexo g</pre></td></tr></table></figure><h2 id=\"自动部署\"><a class=\"markdownIt-Anchor\" href=\"#自动部署\">#</a> 自动部署</h2>\n<p>为了实现每次提交后在自己的服务器自动部署更新博客，我使用了开源的定时任务管理工具<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL291cWlhbmcvZ29jcm9u\"> gocron</span>，加上 github actions 来实现</p>\n<h3 id=\"gocron\"><a class=\"markdownIt-Anchor\" href=\"#gocron\">#</a> gocron</h3>\n<p>使用 Go 语言开发的轻量级定时任务集中调度和管理系统，用于替代 Linux-crontab；<br>\n任务的实现基于<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JvYmZpZy9jcm9u\"> cron 库</span>，这个库的介绍可以看这篇文章<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYXJqdW4uZ2l0aHViLmlvLzIwMjAvMDYvMjUvZ29kYWlseWxpYi9jcm9uLw==\"># Go 每日一库之 cron</span><br>\n 搭建 gocorn</p>\n<ol>\n<li>首先要有一个 mysql 数据库</li>\n<li>然后使用 docker 启动 gocorn 管理系统<br>\n <code>docker run --name gocron --link mysql:db -p 5920:5920 -d ouqg/gocron</code></li>\n<li>打开 ip:5920 配置数据库</li>\n<li>部署一个 node （gocron 支持多节点任务管理，这里我们用一个本地节点就行了）<br>\n在这里下载节点可执行文件  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL291cWlhbmcvZ29jcm9uL3JlbGVhc2Vz\">https://github.com/ouqiang/gocron/releases</span><br>\n 放到服务器上执行即可。</li>\n<li>到 ip:5920 节点管理上增加节点。</li>\n</ol>\n<p>现在一个 gocron 任务管理系统就搭建好了。<br>\n然后来新增一个定时部署博客的任务：<br>\n <code>0 0 0 * * * </code> 表示每天零点执行任务；<br>\n<img data-src=\"https://blog-1258032198.cos.ap-shanghai.myqcloud.com/Pasted%20image%2020230619214516.png\" alt=\"https://blog-1258032198.cos.ap-shanghai.myqcloud.com/Pasted%20image%2020230619214516.png\"></p>\n<h3 id=\"github-action\"><a class=\"markdownIt-Anchor\" href=\"#github-action\">#</a> github Action</h3>\n<p>GitHub Actions 是 GitHub 提供的一项持续集成（CI）和持续部署（CD）服务。它允许开发者在 GitHub 上配置和执行自定义的自动化工作流，以响应不同的事件触发器，例如代码推送、问题创建、拉取请求等。</p>\n<ol>\n<li>\n<p>自动化工作流：GitHub Actions 允许用户创建自定义的工作流程，其中包含一个或多个步骤。每个步骤可以执行各种操作，例如检出代码、运行命令、构建和测试应用程序、部署到服务器等。这些工作流可以自动执行，减少了手动执行重复任务的工作量。</p>\n</li>\n<li>\n<p>事件触发器：GitHub Actions 可以响应各种事件触发器，例如推送到代码仓库、创建拉取请求、问题评论等。用户可以配置工作流在特定事件发生时自动触发，以执行相应的操作。这使得工作流可以根据代码库的状态和活动自动进行响应。</p>\n</li>\n<li>\n<p>社区和市场：GitHub Actions 拥有一个丰富的社区生态系统和市场，其中包含许多由 GitHub 和开发者社区提供的预定义工作流程和操作。用户可以利用这些现成的工作流和操作，加快构建和部署流程的设置。</p>\n</li>\n<li>\n<p>无限扩展性：GitHub Actions 提供了强大的扩展性，允许开发者根据自己的需求编写自定义的操作和工作流程。这使得用户可以根据特定的项目要求和工作流程进行灵活配置。</p>\n</li>\n<li>\n<p>集成和协作：GitHub Actions 与 GitHub 平台紧密集成，可以轻松与其他 GitHub 功能（如拉取请求、问题和代码审查）进行协作。用户可以在工作流中使用 GitHub API 和第三方集成，实现更复杂的自动化任务和工作流程。</p>\n</li>\n</ol>\n<h3 id=\"自动化具体实现\"><a class=\"markdownIt-Anchor\" href=\"#自动化具体实现\">#</a> 自动化具体实现</h3>\n<p>由于 gocron 本身并不提供外部调用的 api，可以直接拉起任务，但是可以通过 http 请求，先登录、再启动任务即可。<br>\n登录需要用户名和密码，这些不能放到仓库代码中，好在 github 提供了 secret 可以配置一些密码变量。</p>\n<ol>\n<li>\n<p>repo 中配置 gocron 登录用户名密码</p>\n<ul>\n<li>repo-Settings-Security-Secrets and variables-Actions  添加 action 可以用的密码变量；</li>\n</ul>\n</li>\n<li>\n<p>编写 github Action</p>\n<ul>\n<li>在 项目根路径 /.github/workflows 下面新建一个 deploy.yml</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy On My server</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">-</span> main  <span class=\"token comment\"># 更改为你要触发的分支</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">login</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest  <span class=\"token comment\"># 可以根据需要更改操作系统</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout code</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Login and Fetch Token</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\"></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          # 在这里编写登录请求的代码，使用适当的语言和库发送POST请求，获取并提取出令牌</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          # 将令牌存储在一个变量中</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token comment\"># 示例（使用 cURL 发送请求）：</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          token=$(curl <span class=\"token punctuation\">-</span>X POST <span class=\"token punctuation\">-</span>d 'username= $&lt;<span class=\"token tag\">!--swig</span>￼4<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span><span class=\"token important\">&amp;password=</span> $&lt;<span class=\"token tag\">!--swig</span>￼5<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span>'  http<span class=\"token punctuation\">:</span>//gocron地址<span class=\"token punctuation\">:</span>5920/api/user/login <span class=\"token punctuation\">|</span> jq <span class=\"token punctuation\">-</span>r '.data.token')</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token key atrule\">echo \"Token</span><span class=\"token punctuation\">:</span> $token\"</pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token comment\"># 将令牌存储为一个 GitHub Actions 的环境变量，以便在后续的步骤中使用</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          echo \"TOKEN=$token\" <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span> $GITHUB_ENV</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Start Deploy Task</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\"></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          # 在这里编写发送下一个请求的代码，使用适当的语言和库</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          # 将上一步获取的令牌放置在请求标头中</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          <span class=\"token comment\"># 示例（使用 cURL 发送请求）：</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>          token=$TOKEN  <span class=\"token comment\"># 获取上一步中存储的令牌</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>          <span class=\"token key atrule\">curl -H \"Auth-Token</span><span class=\"token punctuation\">:</span> $token\"  http<span class=\"token punctuation\">:</span>//gocron地址<span class=\"token punctuation\">:</span>5920/api/task/run/1</pre></td></tr></table></figure><p>这样就 ok 啦！</p>\n",
            "tags": [
                "CI CD linux"
            ]
        }
    ]
}