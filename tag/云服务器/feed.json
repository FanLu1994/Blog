{
    "version": "https://jsonfeed.org/version/1",
    "title": "何妨吟啸且徐行 • All posts by \"云服务器\" tag",
    "description": "",
    "home_page_url": "https://fanlu.top",
    "items": [
        {
            "id": "https://fanlu.top/2023/06/05/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E6%96%B0%E6%90%AD%E5%BB%BA%E5%AE%9E%E5%BD%95/",
            "url": "https://fanlu.top/2023/06/05/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E6%96%B0%E6%90%AD%E5%BB%BA%E5%AE%9E%E5%BD%95/",
            "title": "云服务器重新搭建实录",
            "date_published": "2023-06-05T00:47:28.000Z",
            "content_html": "<blockquote>\n<p>上上周把腾讯云的环境搞坏了，之前搭建的 halo 博客站数据也丢了，好在基本都有备份，有些垃圾文章就直接扔掉了。  重新部署了一下云服务器，包括 rss 阅读、hexo 博客、gocron 定时任务等等。这篇文章记录一下我的部署流程。</p>\n</blockquote>\n<h2 id=\"安装docker\"><a class=\"markdownIt-Anchor\" href=\"#安装docker\">#</a> 安装 docker</h2>\n<p>略</p>\n<h2 id=\"安装docker-compose\"><a class=\"markdownIt-Anchor\" href=\"#安装docker-compose\">#</a> 安装 docker-compose</h2>\n<pre><code>sudo curl -L &quot;https://get.daocloud.io/docker/compose/releases/download/2.17.3/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\ndocker-compose --version\n\n</code></pre>\n<h2 id=\"部署rsshub\"><a class=\"markdownIt-Anchor\" href=\"#部署rsshub\">#</a> 部署 rsshub</h2>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnJzc2h1Yi5hcHAv\">https://docs.rsshub.app/</span></p>\n</blockquote>\n<pre><code>docker pull diygod/rsshub\ndocker run -d --name rsshub -p 1200:1200 diygod/rsshub\n</code></pre>\n<h2 id=\"部署mysql\"><a class=\"markdownIt-Anchor\" href=\"#部署mysql\">#</a> 部署 mysql</h2>\n<ul>\n<li>感谢 chatgpt 的指导</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> volume create mysql_data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> mysql8 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3307</span>:3306 <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span>********</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_DATABASE</span><span class=\"token operator\">=</span>mydb <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_USER</span><span class=\"token operator\">=</span>myuser <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_PASSWORD</span><span class=\"token operator\">=</span>********</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token parameter variable\">-d</span> mysql:8.0 --default-authentication-plugin<span class=\"token operator\">=</span>mysql_native_password</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mysql <span class=\"token parameter variable\">-h</span> <span class=\"token number\">127.0</span>.0.1 <span class=\"token parameter variable\">-P</span> <span class=\"token number\">3307</span> <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span></pre></td></tr></table></figure><h2 id=\"部署rssant\"><a class=\"markdownIt-Anchor\" href=\"#部署rssant\">#</a> 部署 rssant</h2>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FueWFudC9yc3NhbnQ=\">https://github.com/anyant/rssant</span></p>\n</blockquote>\n<ol>\n<li>准备配置文件～/rssant/rssant.env</li>\n</ol>\n<pre><code># 默认关闭DEBUG，请勿在开发测试之外开启DEBUG\nRSSANT_DEBUG=0\n\n# 请随机生成一个字符串\nRSSANT_SECRET_KEY=********\n\n# 应用的访问地址\nRSSANT_ROOT_URL=http://localhost:6789\n\n# 检查订阅的时间间隔，默认30分钟\nRSSANT_CHECK_FEED_MINUTES=30\n\n# 请前往GITHUB设置页面申请，不需要Github登录可留空\n# GitHub OAuth callback:\n# http://&lt;你的域名&gt;/api/v1/accounts/github/login/callback/\nRSSANT_GITHUB_CLIENT_ID=\nRSSANT_GITHUB_SECRET=\n\n# SMTP邮件功能，不需要注册功能可留空\nRSSANT_ADMIN_EMAIL=\nRSSANT_SMTP_ENABLE=false\nRSSANT_SMTP_HOST=smtp.qq.com\nRSSANT_SMTP_PORT=465\nRSSANT_SMTP_USE_SSL=true\nRSSANT_SMTP_USERNAME=\nRSSANT_SMTP_PASSWORD=\n\n# RSS代理功能，可留空\n# 参考项目 cloudflare_worker/rssant 目录下的说明部署代理\nRSSANT_RSS_PROXY_ENABLE=false\nRSSANT_RSS_PROXY_URL=\nRSSANT_RSS_PROXY_TOKEN=\n\n# 以下配置保持不动\nRSSANT_SCHEDULER_NETWORK=rssant\nRSSANT_PG_DB=rssant\nRSSANT_PG_HOST=localhost\nRSSANT_PG_USER=rssant\nRSSANT_PG_PASSWORD=rssant\n</code></pre>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code>#!/bin/bash\n\ndocker volume create rssant-data || true\ndocker volume create rssant-postgres-data || true\ndocker volume create rssant-postgres-logs || true\n\ndocker rm -f rssant || true\ndocker run -ti --name rssant -d \\\n    -p 8050:80 \\\n    --env-file ~/rssant/rssant.env \\\n    -v rssant-data:/app/data \\\n    -v rssant-postgres-data:/var/lib/postgresql/11/main \\\n    -v rssant-postgres-logs:/var/log/postgresql \\\n    --log-driver json-file --log-opt max-size=50m --log-opt max-file=10 \\\n    --restart unless-stopped \\\n    guyskk/rssant:latest\n\ndocker logs --tail 1000 -f rssant\n</code></pre>\n<h2 id=\"部署nginx\"><a class=\"markdownIt-Anchor\" href=\"#部署nginx\">#</a> 部署 nginx</h2>\n<ol>\n<li>安装 nginx</li>\n<li>配置 ssl 证书</li>\n<li>配置端口转发</li>\n</ol>\n<h2 id=\"部署hexo\"><a class=\"markdownIt-Anchor\" href=\"#部署hexo\">#</a> 部署 hexo</h2>\n<ol>\n<li>本地创建自己的 hexo 项目</li>\n<li>部署到 github</li>\n<li>在服务器上拉去项目并 hexo g</li>\n<li>将 nginx location 根目录设置到 hexo 生成目录下<br>\n生成页面为空文件</li>\n</ol>\n<h3 id=\"主题调整\"><a class=\"markdownIt-Anchor\" href=\"#主题调整\">#</a> 主题调整</h3>\n<p>使用这个主题 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==\">https://github.com/amehime/hexo-theme-shoka</span></p>\n<ul>\n<li>修改配置信息等等</li>\n<li>修改语言</li>\n<li>修改标题</li>\n<li>修改 loading</li>\n<li>修改图片函数</li>\n<li>修改图片列表</li>\n<li>添加备案信息</li>\n<li>…<br>\n 一开始配置出了问题，代码没有高亮，重新创建、配置就行了</li>\n</ul>\n<h2 id=\"部署文件服务器\"><a class=\"markdownIt-Anchor\" href=\"#部署文件服务器\">#</a> 部署文件服务器</h2>\n<p>选择 filebrowser <span class=\"exturl\" data-url=\"aHR0cHM6Ly9maWxlYnJvd3Nlci5vcmcvaW5zdGFsbGF0aW9u\">https://filebrowser.org/installation</span></p>\n<p>按照文档进行安装、启动、很方便，但是它不能作为图床使用，只是一个文件管理器。</p>\n<h2 id=\"图床\"><a class=\"markdownIt-Anchor\" href=\"#图床\">#</a> 图床</h2>\n<p>还需要部署图床吗？<br>\n本来想搭建图床、提供给博客使用，但是自己的服务器带宽和存储实在太有限，就使用了第三方的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWdsb2MuY29tLw==\">图床</span><br>\n从<span class=\"exturl\" data-url=\"aHR0cHM6Ly93YWxsaGF2ZW4uY2Mv\"> wallhaven</span> 下载的图片太大了，就用<span class=\"exturl\" data-url=\"aHR0cHM6Ly90dXlhLnhpbnhpYW8udGVjaC8=\">图压</span>先压缩了一下，再上传到图床。</p>\n<h2 id=\"gocron定时任务\"><a class=\"markdownIt-Anchor\" href=\"#gocron定时任务\">#</a> gocron 定时任务</h2>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL291cWlhbmcvZ29jcm9u\">https://github.com/ouqiang/gocron</span><br>\n 先用 docker 安装服务<br>\n再启动一个本地节点</p>\n</blockquote>\n<h3 id=\"节点安装\"><a class=\"markdownIt-Anchor\" href=\"#节点安装\">#</a> 节点安装</h3>\n<p>gocron-node<br>\n 创建用户</p>\n<p>注意：有些后安装的命令，节点无法识别。需要重启一下节点。</p>\n<h3 id=\"自动部署blog\"><a class=\"markdownIt-Anchor\" href=\"#自动部署blog\">#</a> 自动部署 blog</h3>\n<ul>\n<li>github 添加 action</li>\n<li>服务器上部署 gocron 服务</li>\n<li>想办法实现 gocron 的 http 接口触发</li>\n<li>调用部署脚本</li>\n</ul>\n<p>gocron 的接口：</p>\n<ol>\n<li>登录<br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzExMC40Mi4xODIuOTI=\"> http://110.42.182.92</span>:<em>port</em>/api/user/login<br>\npost 请求<br>\n参数：username  password<br>\n 返回的数据：</li>\n</ol>\n<pre><code>&#123;\n\tcode:\n\tmessage:\n\tdata:&#123;\n\t\tis_admin: 1,\n\t\ttoken: &quot;&quot;\n\t\tuid:,\n\t\tusername:&quot;&quot;\n\t&#125;\n&#125;\n</code></pre>\n<ol>\n<li>运行任务<br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzExMC40Mi4xODIuOTI=\"> http://110.42.182.92</span>:<em>port</em>/api/task/run/1<br>\nget 请求<br>\n header 中携带 Auth-Token</li>\n</ol>\n<p>github 中 Action 可以带着 secret，可以先登录在调用任务运行部署脚本；<br>\n脚本需要调整，git 失败时需要不断重试；</p>\n<p>github 脚本：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy On My server</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  push<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    branches<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">-</span> main  <span class=\"token comment\"># 更改为你要触发的分支</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  login<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    runs<span class=\"token punctuation\">-</span><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest  <span class=\"token comment\"># 可以根据需要更改操作系统</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    steps<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout code</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        uses<span class=\"token punctuation\">:</span> actions/checkout@v2</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Login and Fetch Token</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        run<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token comment\"># 在这里编写登录请求的代码，使用适当的语言和库发送 POST 请求，获取并提取出令牌</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token comment\"># 将令牌存储在一个变量中</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token comment\"># 示例（使用 cURL 发送请求）：</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          token=$(curl <span class=\"token punctuation\">-</span>X POST <span class=\"token punctuation\">-</span>d 'username= $&lt;<span class=\"token tag\">!--swig</span>￼0<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span><span class=\"token important\">&amp;password=</span> $&lt;<span class=\"token tag\">!--swig</span>￼1<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span>'  http<span class=\"token punctuation\">:</span>//110.42.182.92<span class=\"token punctuation\">:</span><span class=\"token important\">*port*/api/user/login</span> <span class=\"token punctuation\">|</span> jq <span class=\"token punctuation\">-</span>r '.data.token')</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          echo \"Token<span class=\"token punctuation\">:</span> $token\"</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token comment\"># 将令牌存储为一个 GitHub Actions 的环境变量，以便在后续的步骤中使用</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          echo \"TOKEN=$token\" <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span> $GITHUB_ENV</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Start Deploy Task</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        run<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token comment\"># 在这里编写发送下一个请求的代码，使用适当的语言和库</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token comment\"># 将上一步获取的令牌放置在请求标头中</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token comment\"># 示例（使用 cURL 发送请求）：</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          token=$TOKEN  <span class=\"token comment\"># 获取上一步中存储的令牌</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          curl <span class=\"token punctuation\">-</span><span class=\"token key atrule\">H \"Auth-Token</span><span class=\"token punctuation\">:</span> $token\"  http<span class=\"token punctuation\">:</span>//110.42.182.92<span class=\"token punctuation\">:</span><span class=\"token important\">*port*/api/task/run/1</span></pre></td></tr></table></figure><p>命令脚本：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ~/code/Blog</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">max_retries</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">retry_count</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">success</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$retry_count</span> <span class=\"token parameter variable\">-lt</span> <span class=\"token variable\">$max_retries</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$success</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Attempting to pull Git code (Attempt: <span class=\"token variable\"><span class=\"token variable\">$((</span>retry_count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token variable\">))</span></span>)\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">git</span> pull</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token assign-left variable\">success</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Git pull successful\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token assign-left variable\">retry_count</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>retry_count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token variable\">))</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Git pull failed. Retrying...\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$success</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Git pull failed after <span class=\"token variable\">$max_retries</span> attempts\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>hexo g</pre></td></tr></table></figure>",
            "tags": [
                "云服务器"
            ]
        }
    ]
}