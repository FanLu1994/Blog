<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fanlu.top</id>
    <title>何妨吟啸且徐行 • Posts by &#34;鸡毛蒜皮周刊&#34; tag</title>
    <link href="https://fanlu.top" />
    <updated>2023-06-11T15:05:21.000Z</updated>
    <category term="golang实验室" />
    <category term="前端搬砖指南" />
    <category term="云服务器" />
    <category term="工具" />
    <category term="nuxt axiss 前端" />
    <category term="鸡毛蒜皮周刊" />
    <entry>
        <id>https://fanlu.top/2023/06/11/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-04/</id>
        <title>鸡毛蒜皮周刊-04</title>
        <link rel="alternate" href="https://fanlu.top/2023/06/11/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-04/"/>
        <content type="html">&lt;h2 id=&#34;wasm初体验&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#wasm初体验&#34;&gt;#&lt;/a&gt; WASM 初体验&lt;/h2&gt;
&lt;p&gt;最近看到了很多介绍 webassembly 的文章，包括字节的公众号连续分享了两篇文章：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MTczNjgwODY=&#34;&gt;# WebAssembly 使用场景和未来发展趋势&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MjA3MTY3NTQ=&#34;&gt; WebAssembly 常用开发语言和工具链&lt;/span&gt;&lt;br&gt;
简单来说，webassembly 可以将你用 c、go、rust 等语言写的程序打包，交给 js 在浏览器中调用。我觉得是非常有用的一项技术，一切能用浏览器实现的技术应该早晚会交给浏览器。&lt;br&gt;
出于学习的想法以及对 go 和前端的开发经验，找了一份小教程，体验了一下 go-wasm:&lt;br&gt;
 教程：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9nZWVrdHV0dS5jb20vcG9zdC9xdWljay1nby13YXNtLmh0bWw=&#34;&gt;# Go WebAssembly (Wasm) 简明教程&lt;/span&gt;&lt;br&gt;
还是挺有趣的，把 go 的编译目标系统和架构分别改成 js 和 wasm，然后前端还需要引入 wasm_exec.js。&lt;br&gt;
这里有个小坑，就是用最新的 golang 官方库里面最新的 wasm_exec.js（&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby90cmVlL21hc3Rlci9taXNjL3dhc20lRUYlQkMlODklRTUlOEYlQUYlRTglODMlQkQlRTQlQkMlOUElRTUlODclQkElRTclOEUlQjAlRTYlOEElQTUlRTklOTQlOTklRUYlQkMlOEMlRTglQTYlODElRTclOTQlQThnb29nbGUlRTclOUElODQlRTglQkYlOTklRTQlQjglQUElRTclODklODglRTYlOUMlQUMlRUYlQkMlODhodHRwczovL2dvLmdvb2dsZXNvdXJjZS5jb20vZ28uZ2l0LysvcmVmcy90YWdzL2dvMS4xN3JjMS9taXNjL3dhc20vd2FzbV9leGVjLmpzP2F1dG9kaXZlPTAlMkYlMkYlRUYlQkMlODk=&#34;&gt;https://github.com/golang/go/tree/master/misc/wasm）可能会出现报错，要用 google 的这个版本（https://go.googlesource.com/go.git/+/refs/tags/go1.17rc1/misc/wasm/wasm_exec.js?autodive=0%2F%2F）&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;wsgi和asgi&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#wsgi和asgi&#34;&gt;#&lt;/a&gt; wsgi 和 asgi&lt;/h2&gt;
&lt;p&gt;工作中常用到 python，使用 python 开发 web，一般会用到 flask、django，现在一般采用前后端分离方法，所以一般也不用模板了。python 项目只提供网络接口。开发的时候运行很方便，但是部署的时候一般使用 gunicorn 部署。 它是一个符合 wsgi 规范的 http 服务器，用于为 python web 应用提供底层网络实现。python 还有另外一种网关接口叫做 ASGI，就去查资料了解了一下区别。&lt;br&gt;
首先了解一下基本概念：&lt;br&gt;
- web 服务器：用于提供网络服务，接受外部请求、响应、转发等，比如 nginx、tomcat、apache 等&lt;br&gt;
 - web 应用程序：用于处理请求，执行服务，返回结果，比如 django、flask 等等&lt;br&gt;
 - 网关接口，用于连接 web 服务器和 web 应用程序，wsgi 和 asgi 就是干这个的&lt;br&gt;
 wsgi 是基于 python 的一个网关接口，它不支持 http2.0,websocket 等长连接，只能支持一个请求、一个回应的方式；&lt;br&gt;
asgi 是异步的网关接口，得益于 python3.5 之后加入了 async/await 特性，对 http2.0 和 websocket 提供了支持。&lt;/p&gt;
&lt;p&gt;参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N0dWR5ZWJveS9hcnRpY2xlL2RldGFpbHMvMTIwOTU2MTg4&#34;&gt;https://blog.csdn.net/studyeboy/article/details/120956188&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;gunicorn&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gunicorn&#34;&gt;#&lt;/a&gt; gunicorn&lt;/h2&gt;
&lt;p&gt;再了解一下 gunicorn！&lt;br&gt;
wsgi 服务器会预先生成一批 worker 等待请求的到来，存在一个 master 来管理这些 worker。&lt;br&gt;
worker 也有不同的类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;sync workers&lt;br&gt;
 每个 worker 一次只处理一个请求，并发量很低&lt;/li&gt;
&lt;li&gt;async workers&lt;br&gt;
 基于 Greenlet 有两种：Gevent、Eventlet。
&lt;ul&gt;
&lt;li&gt;GreenLet 是 python 的协程实现、一个线程内，可以有多个 GreenLet，同一时间，只有一个 Greenlet 在 run，调度由系统实现。&lt;/li&gt;
&lt;li&gt;Gevent：通过 Greenlet 协程和 libev 快速事件循环实现异步。 每个请求的连接都是一个 Greenlet 协程，IO 等待时，不会阻塞其他请求的处理&lt;/li&gt;
&lt;li&gt;Eventlet 在 Greenlet 的基础上实现了自己的 GreenThread，实际上就是 greenlet 类的扩展封装，而与 Greenlet 的不同是，Eventlet 实现了自己调度器称为 Hub，Hub 类似于 Tornado 的 IOLoop，是单实例的。在 Hub 中有一个 event loop，根据不同的事件来切换到对应的 GreenThread。同时 Eventlet 还实现了一系列的补丁来使 Python 标准库中的 socket 等等 module 来支持 GreenThread 的切换。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;tornado workers&lt;br&gt;
 配合 tornado 网络框架使用，基于异步非阻塞模型处理长延时请求。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;gunicorn 的高并发就是通过这些 worker 来实现的，worker 配置一般是 2 * CPU+1，在任何时间，都有一半在 io、另一半在占用 cpu。&lt;br&gt;
启动参数：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;-c CONFIG,–config&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;CONFIG&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;指定一个配置文件（py文件）&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;-b BIND,–bind&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;BIND&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;与指定socket进行板顶&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;-D,–daemon&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;后台进程方式运行gunicorn进程&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;-w WORKERS,–workers&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;WORKERS&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;工作进程的数量&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;-k WORKERCLASS,–worker-class&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;WORKERCLASS&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;工作进程类型，包括sync（默认）,eventlet,gevent,tornado,gthread,gaiohttp&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;–backlog INT&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;最大挂起的连接数&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;–log-level LEVEL&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;日志输出等级&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;–access-logfile FILE&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;访问日志输出文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;–error-logfile FILE&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;错误日志输出文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;daisyui&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#daisyui&#34;&gt;#&lt;/a&gt; daisyUI&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kYWlzeXVpLmNvbS9kb2NzL2luc3RhbGwv&#34;&gt;https://daisyui.com/docs/install/&lt;/span&gt;&lt;br&gt;
 一个基于 tailwindcss 的组件库，之前常用 element，好用的同时又嫌弃他样式太丑了，也不好改，于是在新的小项目中使用了 daisyUI 尝试一下，并且自己写 css 的时候也可以参考它的源码库，挺有意思的。&lt;/p&gt;
&lt;h2 id=&#34;andbrowser&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#andbrowser&#34;&gt;#&lt;/a&gt; AndBrowser&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Jlc3RzZW5kL2FuZGJyb3dzZXI=&#34;&gt;https://github.com/restsend/andbrowser&lt;/span&gt;&lt;br&gt;
 在浏览器中接入了 scrcpy，使用了 web 提供的 api，筛选并连接安卓 usb 设备，推送 scrcpy 程序到设备中，并启动，随后连接屏幕视频流和控制流，同时也提供文件管理，作者提供了在线的 demo：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9icm93c2VybGlmeS5jb20vP2Zyb209Z2l0aHVi&#34;&gt;https://browserlify.com/?from=github&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;作者是一个做自动化的大佬，他在知乎上也介绍了这个项目的原理：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MDQ1NzYxNjk=&#34;&gt;# Phone On Web 的实现原理&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;本周阅读&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#本周阅读&#34;&gt;#&lt;/a&gt; 本周阅读&lt;/h2&gt;
&lt;h3 id=&#34;诡秘之主&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#诡秘之主&#34;&gt;#&lt;/a&gt; 诡秘之主&lt;/h3&gt;
&lt;p&gt;看到了第二卷：无面人。&lt;br&gt;
少有的文笔很好的小说，细节描写非常丰富，很容易将我的想象力带入进书中的世界。还会继续看下去。&lt;br&gt;
目前缺点在于，我不太清楚主线的最终目的，可能我看漏了，或者书中没有过多的强调，主线一直不太清晰，我不明白克莱恩最终要怎么样。&lt;/p&gt;
&lt;h3 id=&#34;linux命令行与shell脚本编程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#linux命令行与shell脚本编程&#34;&gt;#&lt;/a&gt; linux 命令行与 shell 脚本编程&lt;/h3&gt;
&lt;p&gt;相比起鸟哥的 liunx 私房菜，这本书读起来就简单多了，基本上就是诸多命令的说明书，也有丰富的案例。适合我这种 linux 菜鸡读，不过之后还会重新读鸟哥。学的深一点更好。&lt;/p&gt;
&lt;h2 id=&#34;买的新玩意儿&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#买的新玩意儿&#34;&gt;#&lt;/a&gt; 买的新玩意儿&lt;/h2&gt;
&lt;h3 id=&#34;ps5&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ps5&#34;&gt;#&lt;/a&gt; ps5&lt;/h3&gt;
&lt;p&gt;今年过生日老婆打算送我 ps5, 本着早买早享受的原则，已经从拼多多买来了，买个三个游戏：双人成行、p5r、蜘蛛侠迈尔斯。 据说各版的 ps5 都可以刷成外服，不过我还是买了日版的，虽然没有保修，不过这东西一般不会坏吧。&lt;br&gt;
电视上打游戏真的爽！&lt;/p&gt;
&lt;h3 id=&#34;always-blue&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#always-blue&#34;&gt;#&lt;/a&gt; always blue&lt;/h3&gt;
&lt;p&gt;之前看美剧《硅谷》，对他们玩的那个 always blue 非常感兴趣，就去淘宝搜了一下，叫做手抛球、变色球。还是挺有意思的，可惜发给我的不是蓝色的。&lt;br&gt;
&lt;img data-src=&#34;https://i.imgloc.com/2023/06/11/VHZPho.jpeg&#34; alt=&#34;alwaysblue&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;重构项目的反思&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#重构项目的反思&#34;&gt;#&lt;/a&gt; 重构项目的反思&lt;/h2&gt;
&lt;p&gt;最近工作中在重构两个项目。&lt;br&gt;
在之前的使用中有很多想法，将它优化，但到实际执行中，发现难以下手，着实有点眼高手低，对整体的设计还是不够了解，对自己的优化想法也没有实际的细节上的规划。要吸取教训，以后要注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;了解整体项目架构：每个点设计的原因细节要搞清楚，前后端实现都要了解&lt;/li&gt;
&lt;li&gt;分析优化点为什么要优化，根源问题在哪？&lt;/li&gt;
&lt;li&gt;修改点要想清楚，前后端增加的工作量不能无效增加&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="鸡毛蒜皮周刊" />
        <updated>2023-06-11T15:05:21.000Z</updated>
    </entry>
    <entry>
        <id>https://fanlu.top/2023/06/03/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-03/</id>
        <title>鸡毛蒜皮周刊-03</title>
        <link rel="alternate" href="https://fanlu.top/2023/06/03/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-03/"/>
        <content type="html">&lt;h2 id=&#34;ue4的网络模块&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ue4的网络模块&#34;&gt;#&lt;/a&gt; ue4 的网络模块&lt;/h2&gt;
&lt;p&gt;ue4 的网络和客户端紧密结合，通过蓝图中的设置就能实现服务器的功能。这篇文章介绍了 ue4 网络模块的原理。&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemh5aW5na3VuLmNvbS9tYXJrZG93bi91ZTRuZXR3b3JrLw==&#34;&gt;UE4 网络模块剖析&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;tcp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#tcp&#34;&gt;#&lt;/a&gt; TCP&lt;/h2&gt;
&lt;p&gt;工作中发现一个棘手的问题，TCP 莫名其妙的断开。目前还没有定位到，可能是阿里云的 DNS 负载均衡搞得鬼。&lt;br&gt;
发现对于 TCP 的了解太匮乏了，于是买了几本书，另外要好好学下 tcpdump 和 wireshark&lt;/p&gt;
&lt;h2 id=&#34;wasm&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#wasm&#34;&gt;#&lt;/a&gt; WASM&lt;/h2&gt;
&lt;p&gt;了解了一下 WASM 是干嘛的：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82ODA0ODUyNA==&#34;&gt;https://zhuanlan.zhihu.com/p/68048524&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;clickhouse&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#clickhouse&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jbGlja2hvdXNlLmNvbS9kb2NzL3poLw==&#34;&gt;ClickHouse&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;ClickHouse 是一个用于联机分析 (OLAP) 的列式数据库管理系统 (DBMS)。&lt;br&gt;
一般用作用户埋点数据存储和分析。&lt;/p&gt;
&lt;h2 id=&#34;表格设计&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#表格设计&#34;&gt;#&lt;/a&gt; 表格设计&lt;/h2&gt;
&lt;p&gt;前端需要展示表格时，总是不知道该如何区分主次、强调信息、美化表格、减少冗余信息。这篇文章详细写了前端表格设计的方方面面，非常实用。&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaHRtbHRyaXAuY29tLzE4NTIuaHRtbA==&#34;&gt;如何设计好的 web 表格？分享大神的总结 - 前端印记 (htmltrip.com)&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="鸡毛蒜皮周刊" />
        <updated>2023-06-03T07:18:12.000Z</updated>
    </entry>
    <entry>
        <id>https://fanlu.top/2023/05/18/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-02/</id>
        <title>鸡毛蒜皮周刊-02</title>
        <link rel="alternate" href="https://fanlu.top/2023/05/18/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-02/"/>
        <content type="html">&lt;h2 id=&#34;nonebot-和-微信机器人&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nonebot-和-微信机器人&#34;&gt;#&lt;/a&gt; NoneBot 和 微信机器人&lt;/h2&gt;
&lt;p&gt;NoneBot（&lt;strong&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly92Mi5ub25lYm90LmRldi8=&#34;&gt;NoneBot&lt;/span&gt;&lt;/strong&gt;）是一个 python 框架，用来实现机器人聊天应答，支持的平台包括：qq、飞书、钉钉等，插件非常丰富，文档也很详尽，准备搭建试试。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly94aWUuaW5mb3EuY24vYXJ0aWNsZS8yMGYxOTE0NjIzN2YzNzE0YzVlYjVhZGI3&#34;&gt;微信 + ChatGPT = 自己的智能助手 | 社区征文_ChatGPT_IT 蜗壳 - Tango_InfoQ 写作社区&lt;/span&gt; 作者基于 wechaty python 库和一个 chatGpt 账号，实现了一个微信的智能应答机器人&lt;/p&gt;
&lt;h2 id=&#34;pake&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pake&#34;&gt;#&lt;/a&gt; Pake&lt;/h2&gt;
&lt;p&gt;基于 rust 和 tauri 来将网站打包成一个应用，支持多平台。&lt;br&gt;
我拿来试了下，打包了部署在个人腾讯云上面的 rss 阅读器，体验非常好，阅读 rss 的时间大大增加了。&lt;br&gt;
&lt;img data-src=&#34;http://110.42.182.92:4080/Pasted%20image%2020230307081744.png&#34; alt=&#34;图片&#34;&gt;&lt;br&gt;
顺便吐槽一句，win 上现有的 rss 阅读器真的很难用。&lt;/p&gt;
&lt;h2 id=&#34;ue4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ue4&#34;&gt;#&lt;/a&gt; UE4&lt;/h2&gt;
&lt;p&gt;由于工作的原因，需要了解一下 UE4 的开发。试了一下 B 站上的一个教程：&lt;/p&gt;
&lt;iframe src=&#34;//player.bilibili.com/player.html?aid=728399911&amp;bvid=BV1qS4y1J7oh&amp;cid=772526176&amp;page=1&#34; scrolling=&#34;no&#34; border=&#34;0&#34; frameborder=&#34;no&#34; framespacing=&#34;0&#34; allowfullscreen=&#34;true&#34;&gt; &lt;/iframe&gt;
体验如下：
- 蓝图太好用了，可视化编程无敌
- 蓝图太难记了，控件、方法实在太多了，有些是需要牵引出来才能找到，太难找了
- ue4的网络模块太牛了，在蓝图里就能开发网络，需要好好学习一下
&lt;h2 id=&#34;rust和chatgpt&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rust和chatgpt&#34;&gt;#&lt;/a&gt; rust 和 chatGPT&lt;/h2&gt;
&lt;p&gt;尝试看了一个 rust 后端，tauri 前端的小项目。&lt;br&gt;
rust 语法有点难理解啊。&lt;br&gt;
忽然想起 chatGPT，于是放进去问问，效果惊人&lt;br&gt;
&lt;img data-src=&#34;http://110.42.182.92:4080/Pasted%20image%2020230309091056.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;travellingscn&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#travellingscn&#34;&gt;#&lt;/a&gt; &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL1RyYXZlbGxpbmdzLmNu&#34;&gt;Travellings.cn&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;偶然发现某个博客有个友链的跳转地址，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3huLS10cmF2ZWxsaW5ncy1rdTZyaThndXU1M2F4cWxiLmNu&#34;&gt;首先跳到 travellings.cn&lt;/span&gt;，然后跳到另一个博客，然后下一个博客也有这么一个链接，感觉是一个博客联盟之类的，进行随机跳转。一查果然没错：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudHJhdmVsbGluZ3MuY24v&#34;&gt;开往 - 友链接力 (travellings.cn)&lt;/span&gt;&lt;br&gt;
 挺有意思的，可以把自己的博客也搞上去&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudHJhdmVsbGluZ3MuY24vZ28uaHRtbA==&#34;&gt;开往 - 友链接力 (travellings.cn)&lt;/span&gt;  这个链接可以随机前往到某个博客，进入他们的世界，感觉很不错。&lt;/p&gt;
</content>
        <category term="鸡毛蒜皮周刊" />
        <updated>2023-05-18T15:20:45.000Z</updated>
    </entry>
    <entry>
        <id>https://fanlu.top/2023/05/15/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-01/</id>
        <title>鸡毛蒜皮周刊-01</title>
        <link rel="alternate" href="https://fanlu.top/2023/05/15/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-01/"/>
        <content type="html">&lt;h2 id=&#34;人类群星闪耀时&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#人类群星闪耀时&#34;&gt;#&lt;/a&gt; 人类群星闪耀时&lt;/h2&gt;
&lt;p&gt;作者茨威格选择了一些很有意思的历史时间进行文学叙述，文笔确实很好。 但是作为一个历史” 爱好者 “，始终无法相信这样过度的文学描写，这样总会导致历史失真。&lt;/p&gt;
&lt;h2 id=&#34;家里的wifi&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#家里的wifi&#34;&gt;#&lt;/a&gt; 家里的 wifi&lt;/h2&gt;
&lt;p&gt;上海电信默认光猫是路由模式，又接了一个小米路由器，网速总是不稳定，这周找师傅来改成了桥接模式，需要电信远程下发数据还挺麻烦。 但是改完之后，室内的台式机（当时装修脑子抽，没给台式机留网口），网络还是一般，怀疑是主板网卡的问题，于是买了一个绿联的即插网卡，插上搞定！&lt;/p&gt;
&lt;h2 id=&#34;chrome插件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#chrome插件&#34;&gt;#&lt;/a&gt; chrome 插件&lt;/h2&gt;
&lt;p&gt;最近对 chrome 插件开发感兴趣。于是琢磨着写个小项目试试能做点啥。于是考虑做个统计网页浏览时间的小应用。简单来说，有两个步骤，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;获取到当前标签页的地址&lt;/li&gt;
&lt;li&gt;切换标签页时重新进行计时&lt;br&gt;
网上的插件开发教程写的还行，但是对于 api 的教程太少了。于是找到了一个现成的插件项目叫做 “网费很贵”，对于我想要的功能它已经做的很完整了。于是扒了下它的源码【&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3NoZWVwemgvdGltZXIvYmxvYi9tYWluL1JFQURNRS16aC5tZCVFMyU4MCU5MSVFMyU4MCU4Mg==&#34;&gt;https://github.com/sheepzh/timer/blob/main/README-zh.md】。&lt;/span&gt; 项目代码十分优雅，一看就能甩我好几年的功力。&lt;br&gt;
找到了几个关键 api：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight ts&#34;&gt;&lt;figcaption data-lang=&#34;TypeScript&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;chrome&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tabs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;onActivated&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;addListener  &lt;span class=&#34;token comment&#34;&gt;// 添加切换 tab 的监听&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;chrome&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;browser&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;setBadgeText  &lt;span class=&#34;token comment&#34;&gt;// 修改插件图标上的文字&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;chrome&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tabs&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tabId&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tab&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 根据 tabID 获取到标签的信息&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;代码会放到 github 上。&lt;/p&gt;
&lt;h2 id=&#34;docxtemplater&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#docxtemplater&#34;&gt;#&lt;/a&gt; docxtemplater&lt;/h2&gt;
&lt;p&gt;工作中用到了前端导出 word 的操作，chatGpt 给我推荐了这个库&lt;br&gt;
！[[Pasted image 20230228121250.png]]&lt;br&gt;
 使用方法可以参照：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDk0MTM5NDEzMjQ4MDgxOTI4&#34;&gt;前端使用 docxtemplater 导出 word 文档最佳实践 - 掘金 (juejin.cn)&lt;/span&gt;&lt;br&gt;
 这个库的地址在：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL29wZW4teG1sLXRlbXBsYXRpbmcvZG9jeHRlbXBsYXRlcg==&#34;&gt;open-xml-templating/docxtemplater: Generate docx, pptx, and xlsx from templates (Word, Powerpoint and Excel documents), from Node.js, the Browser and the command line / Demo: https://www.docxtemplater.com/demo. #docx #office #generator #templating #report #json #generate #generation #template #create #pptx #docx #xlsx #react #vuejs #angularjs #browser #typescript #image #html #table #chart (github.com)&lt;/span&gt;&lt;br&gt;
 使用下来，感觉很强大的一个库，支持模板渲染、循环数据渲染、表格循环渲染。&lt;/p&gt;
&lt;h2 id=&#34;诡秘之主&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#诡秘之主&#34;&gt;#&lt;/a&gt; 诡秘之主&lt;/h2&gt;
&lt;p&gt;这是一个在各种排名都很高的网文，我看了几十章，实在看不下去了，节奏太慢了，看网文的目的是放松和休息大脑，实在不想费劲阅读。&lt;br&gt;
但是打开起点，看到它在第一名，还是继续看下去吧。&lt;/p&gt;
&lt;h2 id=&#34;ppchart&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ppchart&#34;&gt;#&lt;/a&gt; PPChart&lt;/h2&gt;
&lt;p&gt;用 echarts 总觉得调样式很麻烦，这个网站不错，可以看到不少好看的效果，以后可以用来参考（拷贝）。😲&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3BwY2hhcnQuY29tLyMv&#34;&gt;PPChart - 让图表更简单&lt;/span&gt;&lt;br&gt;
！[[Pasted image 20230301164049.png]]&lt;br&gt;
 同类型的网站还有：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubWFrZWFwaWUuY24vZWNoYXJ0c19jYXRlZ29yeS9zZXJpZXMtYmFy&#34;&gt;series-bar 柱状图 - makeapie echarts 图表可视化案例&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;nas赚钱&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nas赚钱&#34;&gt;#&lt;/a&gt; nas 赚钱&lt;/h2&gt;
&lt;p&gt;在极空间 z4s 上打开了迅雷的网心云插件，用闲置的带宽做 pcdn 赚钱，目前几天下来，每天 5 毛钱。可惜没有公网 ip 不然应该会高一点，现在好像还不够 nas 的电费。&lt;/p&gt;
</content>
        <category term="鸡毛蒜皮周刊" />
        <updated>2023-05-15T14:53:53.000Z</updated>
    </entry>
</feed>
