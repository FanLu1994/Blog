{
    "version": "https://jsonfeed.org/version/1",
    "title": "何妨吟啸且徐行 • All posts by \"鸡毛蒜皮周刊\" tag",
    "description": "",
    "home_page_url": "https://fanlu.top",
    "items": [
        {
            "id": "https://fanlu.top/2023/06/11/%E9%98%85%E8%AF%BB/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-04/",
            "url": "https://fanlu.top/2023/06/11/%E9%98%85%E8%AF%BB/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-04/",
            "title": "鸡毛蒜皮周刊-04",
            "date_published": "2023-06-11T15:05:21.000Z",
            "content_html": "<h2 id=\"wasm初体验\"><a class=\"markdownIt-Anchor\" href=\"#wasm初体验\">#</a> WASM 初体验</h2>\n<p>最近看到了很多介绍 webassembly 的文章，包括字节的公众号连续分享了两篇文章：</p>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MTczNjgwODY=\"># WebAssembly 使用场景和未来发展趋势</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82MjA3MTY3NTQ=\"> WebAssembly 常用开发语言和工具链</span><br>\n简单来说，webassembly 可以将你用 c、go、rust 等语言写的程序打包，交给 js 在浏览器中调用。我觉得是非常有用的一项技术，一切能用浏览器实现的技术应该早晚会交给浏览器。<br>\n出于学习的想法以及对 go 和前端的开发经验，找了一份小教程，体验了一下 go-wasm:<br>\n 教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9nZWVrdHV0dS5jb20vcG9zdC9xdWljay1nby13YXNtLmh0bWw=\"># Go WebAssembly (Wasm) 简明教程</span><br>\n还是挺有趣的，把 go 的编译目标系统和架构分别改成 js 和 wasm，然后前端还需要引入 wasm_exec.js。<br>\n这里有个小坑，就是用最新的 golang 官方库里面最新的 wasm_exec.js（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvbGFuZy9nby90cmVlL21hc3Rlci9taXNjL3dhc20lRUYlQkMlODklRTUlOEYlQUYlRTglODMlQkQlRTQlQkMlOUElRTUlODclQkElRTclOEUlQjAlRTYlOEElQTUlRTklOTQlOTklRUYlQkMlOEMlRTglQTYlODElRTclOTQlQThnb29nbGUlRTclOUElODQlRTglQkYlOTklRTQlQjglQUElRTclODklODglRTYlOUMlQUMlRUYlQkMlODhodHRwczovL2dvLmdvb2dsZXNvdXJjZS5jb20vZ28uZ2l0LysvcmVmcy90YWdzL2dvMS4xN3JjMS9taXNjL3dhc20vd2FzbV9leGVjLmpzP2F1dG9kaXZlPTAlMkYlMkYlRUYlQkMlODk=\">https://github.com/golang/go/tree/master/misc/wasm）可能会出现报错，要用 google 的这个版本（https://go.googlesource.com/go.git/+/refs/tags/go1.17rc1/misc/wasm/wasm_exec.js?autodive=0%2F%2F）</span></li>\n</ol>\n<h2 id=\"wsgi和asgi\"><a class=\"markdownIt-Anchor\" href=\"#wsgi和asgi\">#</a> wsgi 和 asgi</h2>\n<p>工作中常用到 python，使用 python 开发 web，一般会用到 flask、django，现在一般采用前后端分离方法，所以一般也不用模板了。python 项目只提供网络接口。开发的时候运行很方便，但是部署的时候一般使用 gunicorn 部署。 它是一个符合 wsgi 规范的 http 服务器，用于为 python web 应用提供底层网络实现。python 还有另外一种网关接口叫做 ASGI，就去查资料了解了一下区别。<br>\n首先了解一下基本概念：<br>\n- web 服务器：用于提供网络服务，接受外部请求、响应、转发等，比如 nginx、tomcat、apache 等<br>\n - web 应用程序：用于处理请求，执行服务，返回结果，比如 django、flask 等等<br>\n - 网关接口，用于连接 web 服务器和 web 应用程序，wsgi 和 asgi 就是干这个的<br>\n wsgi 是基于 python 的一个网关接口，它不支持 http2.0,websocket 等长连接，只能支持一个请求、一个回应的方式；<br>\nasgi 是异步的网关接口，得益于 python3.5 之后加入了 async/await 特性，对 http2.0 和 websocket 提供了支持。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N0dWR5ZWJveS9hcnRpY2xlL2RldGFpbHMvMTIwOTU2MTg4\">https://blog.csdn.net/studyeboy/article/details/120956188</span></p>\n<h2 id=\"gunicorn\"><a class=\"markdownIt-Anchor\" href=\"#gunicorn\">#</a> gunicorn</h2>\n<p>再了解一下 gunicorn！<br>\nwsgi 服务器会预先生成一批 worker 等待请求的到来，存在一个 master 来管理这些 worker。<br>\nworker 也有不同的类型：</p>\n<ol>\n<li>sync workers<br>\n 每个 worker 一次只处理一个请求，并发量很低</li>\n<li>async workers<br>\n 基于 Greenlet 有两种：Gevent、Eventlet。\n<ul>\n<li>GreenLet 是 python 的协程实现、一个线程内，可以有多个 GreenLet，同一时间，只有一个 Greenlet 在 run，调度由系统实现。</li>\n<li>Gevent：通过 Greenlet 协程和 libev 快速事件循环实现异步。 每个请求的连接都是一个 Greenlet 协程，IO 等待时，不会阻塞其他请求的处理</li>\n<li>Eventlet 在 Greenlet 的基础上实现了自己的 GreenThread，实际上就是 greenlet 类的扩展封装，而与 Greenlet 的不同是，Eventlet 实现了自己调度器称为 Hub，Hub 类似于 Tornado 的 IOLoop，是单实例的。在 Hub 中有一个 event loop，根据不同的事件来切换到对应的 GreenThread。同时 Eventlet 还实现了一系列的补丁来使 Python 标准库中的 socket 等等 module 来支持 GreenThread 的切换。</li>\n</ul>\n</li>\n<li>tornado workers<br>\n 配合 tornado 网络框架使用，基于异步非阻塞模型处理长延时请求。</li>\n</ol>\n<p>gunicorn 的高并发就是通过这些 worker 来实现的，worker 配置一般是 2 * CPU+1，在任何时间，都有一半在 io、另一半在占用 cpu。<br>\n启动参数：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>-c CONFIG,–config<span class=\"token operator\">=</span>CONFIG</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>指定一个配置文件（py文件）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>-b BIND,–bind<span class=\"token operator\">=</span>BIND</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>与指定socket进行板顶</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>-D,–daemon</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>后台进程方式运行gunicorn进程</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>-w WORKERS,–workers<span class=\"token operator\">=</span>WORKERS</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>工作进程的数量</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>-k WORKERCLASS,–worker-class<span class=\"token operator\">=</span>WORKERCLASS</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>工作进程类型，包括sync（默认）,eventlet,gevent,tornado,gthread,gaiohttp</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>–backlog INT</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>最大挂起的连接数</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>–log-level LEVEL</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>日志输出等级</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>–access-logfile FILE</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>访问日志输出文件</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>–error-logfile FILE</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>错误日志输出文件</pre></td></tr></table></figure><h2 id=\"daisyui\"><a class=\"markdownIt-Anchor\" href=\"#daisyui\">#</a> daisyUI</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYWlzeXVpLmNvbS9kb2NzL2luc3RhbGwv\">https://daisyui.com/docs/install/</span><br>\n 一个基于 tailwindcss 的组件库，之前常用 element，好用的同时又嫌弃他样式太丑了，也不好改，于是在新的小项目中使用了 daisyUI 尝试一下，并且自己写 css 的时候也可以参考它的源码库，挺有意思的。</p>\n<h2 id=\"andbrowser\"><a class=\"markdownIt-Anchor\" href=\"#andbrowser\">#</a> AndBrowser</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Jlc3RzZW5kL2FuZGJyb3dzZXI=\">https://github.com/restsend/andbrowser</span><br>\n 在浏览器中接入了 scrcpy，使用了 web 提供的 api，筛选并连接安卓 usb 设备，推送 scrcpy 程序到设备中，并启动，随后连接屏幕视频流和控制流，同时也提供文件管理，作者提供了在线的 demo：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9icm93c2VybGlmeS5jb20vP2Zyb209Z2l0aHVi\">https://browserlify.com/?from=github</span></p>\n<p>作者是一个做自动化的大佬，他在知乎上也介绍了这个项目的原理：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC81MDQ1NzYxNjk=\"># Phone On Web 的实现原理</span></p>\n<h2 id=\"本周阅读\"><a class=\"markdownIt-Anchor\" href=\"#本周阅读\">#</a> 本周阅读</h2>\n<h3 id=\"诡秘之主\"><a class=\"markdownIt-Anchor\" href=\"#诡秘之主\">#</a> 诡秘之主</h3>\n<p>看到了第二卷：无面人。<br>\n少有的文笔很好的小说，细节描写非常丰富，很容易将我的想象力带入进书中的世界。还会继续看下去。<br>\n目前缺点在于，我不太清楚主线的最终目的，可能我看漏了，或者书中没有过多的强调，主线一直不太清晰，我不明白克莱恩最终要怎么样。</p>\n<h3 id=\"linux命令行与shell脚本编程\"><a class=\"markdownIt-Anchor\" href=\"#linux命令行与shell脚本编程\">#</a> linux 命令行与 shell 脚本编程</h3>\n<p>相比起鸟哥的 liunx 私房菜，这本书读起来就简单多了，基本上就是诸多命令的说明书，也有丰富的案例。适合我这种 linux 菜鸡读，不过之后还会重新读鸟哥。学的深一点更好。</p>\n<h2 id=\"买的新玩意儿\"><a class=\"markdownIt-Anchor\" href=\"#买的新玩意儿\">#</a> 买的新玩意儿</h2>\n<h3 id=\"ps5\"><a class=\"markdownIt-Anchor\" href=\"#ps5\">#</a> ps5</h3>\n<p>今年过生日老婆打算送我 ps5, 本着早买早享受的原则，已经从拼多多买来了，买个三个游戏：双人成行、p5r、蜘蛛侠迈尔斯。 据说各版的 ps5 都可以刷成外服，不过我还是买了日版的，虽然没有保修，不过这东西一般不会坏吧。<br>\n电视上打游戏真的爽！</p>\n<h3 id=\"always-blue\"><a class=\"markdownIt-Anchor\" href=\"#always-blue\">#</a> always blue</h3>\n<p>之前看美剧《硅谷》，对他们玩的那个 always blue 非常感兴趣，就去淘宝搜了一下，叫做手抛球、变色球。还是挺有意思的，可惜发给我的不是蓝色的。<br>\n<img data-src=\"https://i.imgloc.com/2023/06/11/VHZPho.jpeg\" alt=\"alwaysblue\"></p>\n<h2 id=\"重构项目的反思\"><a class=\"markdownIt-Anchor\" href=\"#重构项目的反思\">#</a> 重构项目的反思</h2>\n<p>最近工作中在重构两个项目。<br>\n在之前的使用中有很多想法，将它优化，但到实际执行中，发现难以下手，着实有点眼高手低，对整体的设计还是不够了解，对自己的优化想法也没有实际的细节上的规划。要吸取教训，以后要注意：</p>\n<ul>\n<li>了解整体项目架构：每个点设计的原因细节要搞清楚，前后端实现都要了解</li>\n<li>分析优化点为什么要优化，根源问题在哪？</li>\n<li>修改点要想清楚，前后端增加的工作量不能无效增加</li>\n</ul>\n",
            "tags": [
                "鸡毛蒜皮周刊"
            ]
        },
        {
            "id": "https://fanlu.top/2023/06/03/%E9%98%85%E8%AF%BB/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-03/",
            "url": "https://fanlu.top/2023/06/03/%E9%98%85%E8%AF%BB/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-03/",
            "title": "鸡毛蒜皮周刊-03",
            "date_published": "2023-06-03T07:18:12.000Z",
            "content_html": "<h2 id=\"ue4的网络模块\"><a class=\"markdownIt-Anchor\" href=\"#ue4的网络模块\">#</a> ue4 的网络模块</h2>\n<p>ue4 的网络和客户端紧密结合，通过蓝图中的设置就能实现服务器的功能。这篇文章介绍了 ue4 网络模块的原理。<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemh5aW5na3VuLmNvbS9tYXJrZG93bi91ZTRuZXR3b3JrLw==\">UE4 网络模块剖析</span></p>\n<h2 id=\"tcp\"><a class=\"markdownIt-Anchor\" href=\"#tcp\">#</a> TCP</h2>\n<p>工作中发现一个棘手的问题，TCP 莫名其妙的断开。目前还没有定位到，可能是阿里云的 DNS 负载均衡搞得鬼。<br>\n发现对于 TCP 的了解太匮乏了，于是买了几本书，另外要好好学下 tcpdump 和 wireshark</p>\n<h2 id=\"wasm\"><a class=\"markdownIt-Anchor\" href=\"#wasm\">#</a> WASM</h2>\n<p>了解了一下 WASM 是干嘛的：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82ODA0ODUyNA==\">https://zhuanlan.zhihu.com/p/68048524</span></p>\n<h2 id=\"clickhouse\"><a class=\"markdownIt-Anchor\" href=\"#clickhouse\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbGlja2hvdXNlLmNvbS9kb2NzL3poLw==\">ClickHouse</span></h2>\n<p>ClickHouse 是一个用于联机分析 (OLAP) 的列式数据库管理系统 (DBMS)。<br>\n一般用作用户埋点数据存储和分析。</p>\n<h2 id=\"表格设计\"><a class=\"markdownIt-Anchor\" href=\"#表格设计\">#</a> 表格设计</h2>\n<p>前端需要展示表格时，总是不知道该如何区分主次、强调信息、美化表格、减少冗余信息。这篇文章详细写了前端表格设计的方方面面，非常实用。<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaHRtbHRyaXAuY29tLzE4NTIuaHRtbA==\">如何设计好的 web 表格？分享大神的总结 - 前端印记 (htmltrip.com)</span></p>\n",
            "tags": [
                "鸡毛蒜皮周刊"
            ]
        },
        {
            "id": "https://fanlu.top/2023/05/18/%E9%98%85%E8%AF%BB/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-02/",
            "url": "https://fanlu.top/2023/05/18/%E9%98%85%E8%AF%BB/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-02/",
            "title": "鸡毛蒜皮周刊-02",
            "date_published": "2023-05-18T15:20:45.000Z",
            "content_html": "<h2 id=\"nonebot-和-微信机器人\"><a class=\"markdownIt-Anchor\" href=\"#nonebot-和-微信机器人\">#</a> NoneBot 和 微信机器人</h2>\n<p>NoneBot（<strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly92Mi5ub25lYm90LmRldi8=\">NoneBot</span></strong>）是一个 python 框架，用来实现机器人聊天应答，支持的平台包括：qq、飞书、钉钉等，插件非常丰富，文档也很详尽，准备搭建试试。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94aWUuaW5mb3EuY24vYXJ0aWNsZS8yMGYxOTE0NjIzN2YzNzE0YzVlYjVhZGI3\">微信 + ChatGPT = 自己的智能助手 | 社区征文_ChatGPT_IT 蜗壳 - Tango_InfoQ 写作社区</span> 作者基于 wechaty python 库和一个 chatGpt 账号，实现了一个微信的智能应答机器人</p>\n<h2 id=\"pake\"><a class=\"markdownIt-Anchor\" href=\"#pake\">#</a> Pake</h2>\n<p>基于 rust 和 tauri 来将网站打包成一个应用，支持多平台。<br>\n我拿来试了下，打包了部署在个人腾讯云上面的 rss 阅读器，体验非常好，阅读 rss 的时间大大增加了。<br>\n<img data-src=\"http://110.42.182.92:4080/Pasted%20image%2020230307081744.png\" alt=\"图片\"><br>\n顺便吐槽一句，win 上现有的 rss 阅读器真的很难用。</p>\n<h2 id=\"ue4\"><a class=\"markdownIt-Anchor\" href=\"#ue4\">#</a> UE4</h2>\n<p>由于工作的原因，需要了解一下 UE4 的开发。试了一下 B 站上的一个教程：</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=728399911&bvid=BV1qS4y1J7oh&cid=772526176&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n体验如下：\n- 蓝图太好用了，可视化编程无敌\n- 蓝图太难记了，控件、方法实在太多了，有些是需要牵引出来才能找到，太难找了\n- ue4的网络模块太牛了，在蓝图里就能开发网络，需要好好学习一下\n<h2 id=\"rust和chatgpt\"><a class=\"markdownIt-Anchor\" href=\"#rust和chatgpt\">#</a> rust 和 chatGPT</h2>\n<p>尝试看了一个 rust 后端，tauri 前端的小项目。<br>\nrust 语法有点难理解啊。<br>\n忽然想起 chatGPT，于是放进去问问，效果惊人<br>\n<img data-src=\"http://110.42.182.92:4080/Pasted%20image%2020230309091056.png\" alt=\"\"></p>\n<h2 id=\"travellingscn\"><a class=\"markdownIt-Anchor\" href=\"#travellingscn\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL1RyYXZlbGxpbmdzLmNu\">Travellings.cn</span></h2>\n<p>偶然发现某个博客有个友链的跳转地址，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS10cmF2ZWxsaW5ncy1rdTZyaThndXU1M2F4cWxiLmNu\">首先跳到 travellings.cn</span>，然后跳到另一个博客，然后下一个博客也有这么一个链接，感觉是一个博客联盟之类的，进行随机跳转。一查果然没错：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHJhdmVsbGluZ3MuY24v\">开往 - 友链接力 (travellings.cn)</span><br>\n 挺有意思的，可以把自己的博客也搞上去<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHJhdmVsbGluZ3MuY24vZ28uaHRtbA==\">开往 - 友链接力 (travellings.cn)</span>  这个链接可以随机前往到某个博客，进入他们的世界，感觉很不错。</p>\n",
            "tags": [
                "鸡毛蒜皮周刊"
            ]
        },
        {
            "id": "https://fanlu.top/2023/05/15/%E9%98%85%E8%AF%BB/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-01/",
            "url": "https://fanlu.top/2023/05/15/%E9%98%85%E8%AF%BB/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-01/",
            "title": "鸡毛蒜皮周刊-01",
            "date_published": "2023-05-15T14:53:53.000Z",
            "content_html": "<h2 id=\"人类群星闪耀时\"><a class=\"markdownIt-Anchor\" href=\"#人类群星闪耀时\">#</a> 人类群星闪耀时</h2>\n<p>作者茨威格选择了一些很有意思的历史时间进行文学叙述，文笔确实很好。 但是作为一个历史” 爱好者 “，始终无法相信这样过度的文学描写，这样总会导致历史失真。</p>\n<h2 id=\"家里的wifi\"><a class=\"markdownIt-Anchor\" href=\"#家里的wifi\">#</a> 家里的 wifi</h2>\n<p>上海电信默认光猫是路由模式，又接了一个小米路由器，网速总是不稳定，这周找师傅来改成了桥接模式，需要电信远程下发数据还挺麻烦。 但是改完之后，室内的台式机（当时装修脑子抽，没给台式机留网口），网络还是一般，怀疑是主板网卡的问题，于是买了一个绿联的即插网卡，插上搞定！</p>\n<h2 id=\"chrome插件\"><a class=\"markdownIt-Anchor\" href=\"#chrome插件\">#</a> chrome 插件</h2>\n<p>最近对 chrome 插件开发感兴趣。于是琢磨着写个小项目试试能做点啥。于是考虑做个统计网页浏览时间的小应用。简单来说，有两个步骤，</p>\n<ol>\n<li>获取到当前标签页的地址</li>\n<li>切换标签页时重新进行计时<br>\n网上的插件开发教程写的还行，但是对于 api 的教程太少了。于是找到了一个现成的插件项目叫做 “网费很贵”，对于我想要的功能它已经做的很完整了。于是扒了下它的源码【<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoZWVwemgvdGltZXIvYmxvYi9tYWluL1JFQURNRS16aC5tZCVFMyU4MCU5MSVFMyU4MCU4Mg==\">https://github.com/sheepzh/timer/blob/main/README-zh.md】。</span> 项目代码十分优雅，一看就能甩我好几年的功力。<br>\n找到了几个关键 api：</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>chrome<span class=\"token punctuation\">.</span>tabs<span class=\"token punctuation\">.</span>onActivated<span class=\"token punctuation\">.</span>addListener  <span class=\"token comment\">// 添加切换 tab 的监听</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>chrome<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">.</span>setBadgeText  <span class=\"token comment\">// 修改插件图标上的文字</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>chrome<span class=\"token punctuation\">.</span>tabs<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>tabId<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 根据 tabID 获取到标签的信息</span></pre></td></tr></table></figure><p>代码会放到 github 上。</p>\n<h2 id=\"docxtemplater\"><a class=\"markdownIt-Anchor\" href=\"#docxtemplater\">#</a> docxtemplater</h2>\n<p>工作中用到了前端导出 word 的操作，chatGpt 给我推荐了这个库<br>\n！[[Pasted image 20230228121250.png]]<br>\n 使用方法可以参照：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDk0MTM5NDEzMjQ4MDgxOTI4\">前端使用 docxtemplater 导出 word 文档最佳实践 - 掘金 (juejin.cn)</span><br>\n 这个库的地址在：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW4teG1sLXRlbXBsYXRpbmcvZG9jeHRlbXBsYXRlcg==\">open-xml-templating/docxtemplater: Generate docx, pptx, and xlsx from templates (Word, Powerpoint and Excel documents), from Node.js, the Browser and the command line / Demo: https://www.docxtemplater.com/demo. #docx #office #generator #templating #report #json #generate #generation #template #create #pptx #docx #xlsx #react #vuejs #angularjs #browser #typescript #image #html #table #chart (github.com)</span><br>\n 使用下来，感觉很强大的一个库，支持模板渲染、循环数据渲染、表格循环渲染。</p>\n<h2 id=\"诡秘之主\"><a class=\"markdownIt-Anchor\" href=\"#诡秘之主\">#</a> 诡秘之主</h2>\n<p>这是一个在各种排名都很高的网文，我看了几十章，实在看不下去了，节奏太慢了，看网文的目的是放松和休息大脑，实在不想费劲阅读。<br>\n但是打开起点，看到它在第一名，还是继续看下去吧。</p>\n<h2 id=\"ppchart\"><a class=\"markdownIt-Anchor\" href=\"#ppchart\">#</a> PPChart</h2>\n<p>用 echarts 总觉得调样式很麻烦，这个网站不错，可以看到不少好看的效果，以后可以用来参考（拷贝）。😲<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL3BwY2hhcnQuY29tLyMv\">PPChart - 让图表更简单</span><br>\n！[[Pasted image 20230301164049.png]]<br>\n 同类型的网站还有：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWFrZWFwaWUuY24vZWNoYXJ0c19jYXRlZ29yeS9zZXJpZXMtYmFy\">series-bar 柱状图 - makeapie echarts 图表可视化案例</span></p>\n<h2 id=\"nas赚钱\"><a class=\"markdownIt-Anchor\" href=\"#nas赚钱\">#</a> nas 赚钱</h2>\n<p>在极空间 z4s 上打开了迅雷的网心云插件，用闲置的带宽做 pcdn 赚钱，目前几天下来，每天 5 毛钱。可惜没有公网 ip 不然应该会高一点，现在好像还不够 nas 的电费。</p>\n",
            "tags": [
                "鸡毛蒜皮周刊"
            ]
        }
    ]
}