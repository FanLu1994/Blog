{
    "version": "https://jsonfeed.org/version/1",
    "title": "何妨吟啸且徐行 • All posts by \"前端 工具\" tag",
    "description": "",
    "home_page_url": "https://fanlu.top",
    "items": [
        {
            "id": "https://fanlu.top/2023/08/23/%E5%89%8D%E7%AB%AF/rrweb%E4%BD%BF%E7%94%A8/",
            "url": "https://fanlu.top/2023/08/23/%E5%89%8D%E7%AB%AF/rrweb%E4%BD%BF%E7%94%A8/",
            "title": "rrweb使用",
            "date_published": "2023-08-23T15:09:10.000Z",
            "content_html": "<h2 id=\"介绍\"><a class=\"markdownIt-Anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<p>rrweb 是一种通过记录页面 dom 元素的变化，以及鼠标或者键盘输入的变化，来实现 web 操作的录制回放的功能。<br>\n官网在这里：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnJ3ZWIuaW8v\">rrweb</span><br>\n 源码在这里：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Jyd2ViLWlvL3Jyd2Vi\">https://github.com/rrweb-io/rrweb</span></p>\n<h2 id=\"在vue中使用\"><a class=\"markdownIt-Anchor\" href=\"#在vue中使用\">#</a> 在 vue 中使用</h2>\n<h3 id=\"新建vue3项目\"><a class=\"markdownIt-Anchor\" href=\"#新建vue3项目\">#</a> 新建 vue3 项目</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> @vue/cli</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vue create rrweb-vue-demo</pre></td></tr></table></figure><h3 id=\"创建两个路由页面\"><a class=\"markdownIt-Anchor\" href=\"#创建两个路由页面\">#</a> 创建两个路由页面</h3>\n<p>分别用来录制操作和回放操作</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Router <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>path<span class=\"token operator\">:</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>component<span class=\"token operator\">:</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../Record.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/play'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../Play.vue\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">]</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> Router<span class=\"token punctuation\">.</span><span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 4. 内部提供了 history 模式的实现。为了简单起见，我们在这里使用 hash 模式。  </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    history<span class=\"token operator\">:</span> Router<span class=\"token punctuation\">.</span><span class=\"token function\">createWebHashHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    routes<span class=\"token punctuation\">,</span> <span class=\"token comment\">// `routes: routes` 的缩写  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"录制和播放\"><a class=\"markdownIt-Anchor\" href=\"#录制和播放\">#</a> 录制和播放</h3>\n<h3 id=\"安装rrweb\"><a class=\"markdownIt-Anchor\" href=\"#安装rrweb\">#</a> 安装 rrweb</h3>\n<pre><code>npm install rrweb rrweb-player\n</code></pre>\n<h3 id=\"录制\"><a class=\"markdownIt-Anchor\" href=\"#录制\">#</a> 录制</h3>\n<p>这里录制 20s 自动停止，你也可以改成手动停止</p>\n<pre><code class=\"language-vue\">&lt;template&gt;  \n  &lt;button @click=&quot;startRecord&quot;&gt;开启记录&lt;/button&gt;  \n  &lt;HelloWorld msg=&quot;Vite + Vue&quot; /&gt;  \n  &lt;button @click=&quot;gotoPlay&quot;&gt;前往回放&lt;/button&gt;  \n&lt;/template&gt;  \n  \n&lt;script setup  lang=&quot;ts&quot;&gt;  \nimport HelloWorld from './components/HelloWorld.vue'  \nimport * as rrweb from &quot;rrweb&quot;;  \nimport &#123;useRouter&#125; from &quot;vue-router&quot;;  \nconst startRecord = () =&gt; &#123;  \n  //record() 方法启动录制  \n  //stopFn为暂停录制的方法  \n  let stopFn = rrweb.record(&#123;  \n    //12秒后停止页面的录制，如果想一直录得话可以去掉。  \n    emit(event) &#123;  \n      setTimeout(() =&gt; &#123;  \n        stopFn();  \n      &#125;, 20000);  \n      // 用任意方式存  储 event      // store.commit(&quot;updateEvents&quot;, &#123; event: event &#125;);      let eventList: any[] = JSON.parse(localStorage.getItem(&quot;events&quot;))  \n      if (eventList == null)&#123;  \n        eventList = [event]  \n      &#125;else&#123;  \n        eventList.push(event)  \n      &#125;  \n      localStorage.setItem(&quot;events&quot;,JSON.stringify(eventList))  \n  \n      // lo  \n      console.log(event)  \n    &#125;,  \n  &#125;);  \n  console.log(&quot;开启记录&quot;)  \n&#125;;  \n  \nconst route = useRouter()  \nconst gotoPlay = ()=&gt;&#123;  \n  \n  console.log(route)  \n  route.push(&quot;/play&quot;)  \n&#125;  \n  \n&lt;/script&gt;  \n  \n&lt;style scoped&gt;  \n  \n&lt;/style&gt;\n</code></pre>\n<h3 id=\"回放\"><a class=\"markdownIt-Anchor\" href=\"#回放\">#</a> 回放</h3>\n<pre><code class=\"language-vue\">&lt;template&gt;  \n  &lt;button @click=&quot;startPlay&quot;&gt;回放&lt;/button&gt;  \n  &lt;div class=&quot;counte&quot;&gt;  \n    &lt;div id=&quot;playback&quot;&gt;&lt;/div&gt;  \n  &lt;/div&gt;&lt;/template&gt;  \n  \n&lt;script lang=&quot;ts&quot; setup&gt;  \nimport rrwebPlayer from &quot;rrweb-player&quot;;  \nimport &quot;rrweb-player/dist/style.css&quot;  \nimport &#123;ref&#125; from &quot;vue&quot;;  \n  \nconst player = ref(null)  \nconst startPlay = ()=&gt;&#123;  \n  const events = JSON.parse(localStorage.getItem(&quot;events&quot;))  \n  player.value = new rrwebPlayer(&#123;  \n    target: document.getElementById(&quot;playback&quot;),  \n    props:&#123;  \n      events:events,  \n      speedOption:[1,2,5,10]  \n    &#125;  \n  &#125;)  \n&#125;  \n  \n&lt;/script&gt;  \n  \n&lt;style scoped&gt;  \n  \n&lt;/style&gt;\n</code></pre>\n<h2 id=\"用途\"><a class=\"markdownIt-Anchor\" href=\"#用途\">#</a> 用途</h2>\n<h3 id=\"自动化测试\"><a class=\"markdownIt-Anchor\" href=\"#自动化测试\">#</a> 自动化测试</h3>\n<p>对于 web 的项目，可以预先录制一份操作数据。<br>\n然后测试时通过回放操作来进行回放。<br>\n不过如何发现测试中的错误，我还没有深入研究。<br>\n当然，如果要进行自动化测试，前端还有很多自动化的工具可以使用，这个未必好用。</p>\n<h3 id=\"bug复现\"><a class=\"markdownIt-Anchor\" href=\"#bug复现\">#</a> bug 复现</h3>\n<p>这个应该是 rrweb 最重要的功能。<br>\n线上如果出现 bug，可以利用 rrweb 录制的结果去回放 bug 现场。什么时机判断出现了 bug 呢？可以让用户一键上报，也可以进行埋点，发现问题就自动上报。</p>\n<h3 id=\"操作说明\"><a class=\"markdownIt-Anchor\" href=\"#操作说明\">#</a> 操作说明</h3>\n<p>一些需要教育用户的复杂操作，可以通过 rrweb 录制一份操作指南，让用户去观看学习。</p>\n<h3 id=\"其他\"><a class=\"markdownIt-Anchor\" href=\"#其他\">#</a> 其他</h3>\n<p>其他</p>\n<h2 id=\"注意事项\"><a class=\"markdownIt-Anchor\" href=\"#注意事项\">#</a> ！！ 注意事项</h2>\n<p>因为回放的原理是通过 iframe 加载网页，来回放操作，如果录制时和回放时的内容不一样，那就 game over 了</p>\n",
            "tags": [
                "前端 工具"
            ]
        }
    ]
}