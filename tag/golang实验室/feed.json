{
    "version": "https://jsonfeed.org/version/1",
    "title": "何妨吟啸且徐行 • All posts by \"golang实验室\" tag",
    "description": "",
    "home_page_url": "https://fanlu.top",
    "items": [
        {
            "id": "https://fanlu.top/2023/05/17/gopher-lua%E4%BD%BF%E7%94%A8%E5%B0%8Fdemo/",
            "url": "https://fanlu.top/2023/05/17/gopher-lua%E4%BD%BF%E7%94%A8%E5%B0%8Fdemo/",
            "title": "gopher-lua使用小demo",
            "date_published": "2023-05-17T01:04:08.000Z",
            "content_html": "<blockquote>\n<p>模拟读者读书</p>\n</blockquote>\n<h2 id=\"首先新建reader类\"><a class=\"anchor\" href=\"#首先新建reader类\">#</a> 首先新建 reader 类</h2>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">type</span> Reader <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tUid         <span class=\"token builtin\">uint32</span>\n\tUserName    <span class=\"token builtin\">string</span>\n\tReaderCount <span class=\"token builtin\">uint8</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>reader <span class=\"token operator\">*</span>Reader<span class=\"token punctuation\">)</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>book <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\treader<span class=\"token punctuation\">.</span>ReaderCount<span class=\"token operator\">++</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reader:%v,Name:%v,read book %v\\n\"</span><span class=\"token punctuation\">,</span> reader<span class=\"token punctuation\">.</span>Uid<span class=\"token punctuation\">,</span> reader<span class=\"token punctuation\">.</span>UserName<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h2 id=\"将reader类注册到lua中\"><a class=\"anchor\" href=\"#将reader类注册到lua中\">#</a> 将 reader 类注册到 lua 中</h2>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> lua <span class=\"token string\">\"github.com/yuin/gopher-lua\"</span>\n\n<span class=\"token keyword\">const</span> luaPersonTypeName <span class=\"token operator\">=</span> <span class=\"token string\">\"reader\"</span>\n\n<span class=\"token keyword\">var</span> readerMethods <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>lua<span class=\"token punctuation\">.</span>LGFunction<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token string\">\"read\"</span><span class=\"token punctuation\">:</span>     luaReaderRead<span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span> readerGetSetUsername<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 注册定义的类成为 lua 的一个元表</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">registerReaderType</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tmt <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTypeMetatable</span><span class=\"token punctuation\">(</span>luaPersonTypeName<span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reader\"</span><span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"new\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunction</span><span class=\"token punctuation\">(</span>luaNewReader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__index\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">SetFuncs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> readerMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//lua 创建对象方法</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">luaNewReader</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\treader <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Reader<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tL<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tud <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewUserData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tud<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> reader\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetMetatable</span><span class=\"token punctuation\">(</span>ud<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypeMetatable</span><span class=\"token punctuation\">(</span>luaPersonTypeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>ud<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 在 lua 中获取对象的重要一步</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">checkReader</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Reader <span class=\"token punctuation\">&#123;</span>\n\tud <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckUserData</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> ud<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Reader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> v\n\t<span class=\"token punctuation\">&#125;</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">ArgError</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"reader expected\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 方法注册到 lua 中</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">luaReaderRead</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tr <span class=\"token operator\">:=</span> <span class=\"token function\">checkReader</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span>\n\tbook <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 属性的 get Set 方法， 注意方法名必须这样写：结构名 GetSet 属性名，大小写也要注意</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">readerGetSetUsername</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tr <span class=\"token operator\">:=</span> <span class=\"token function\">checkReader</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">GetTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span>\n\t\tr<span class=\"token punctuation\">.</span>UserName <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>UserName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h2 id=\"也许有一些模块需要注入到lua中\"><a class=\"anchor\" href=\"#也许有一些模块需要注入到lua中\">#</a> 也许有一些模块需要注入到 lua 中</h2>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\tlua <span class=\"token string\">\"github.com/yuin/gopher-lua\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> modFuncs <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>lua<span class=\"token punctuation\">.</span>LGFunction<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">:</span>    Eat<span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"drink\"</span><span class=\"token punctuation\">:</span>  Drink<span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"record\"</span><span class=\"token punctuation\">:</span> Record<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Eat</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tmsg <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat:\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Drink</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tmsg <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"drink:\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Record</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tr <span class=\"token operator\">:=</span> <span class=\"token function\">checkReader</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v读完了！一共%v本书！\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>UserName<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>ReaderCount<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Loader</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tmod <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">SetFuncs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> modFuncs<span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mymod\"</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h2 id=\"预先定义一个lua文件\"><a class=\"anchor\" href=\"#预先定义一个lua文件\">#</a> 预先定义一个 lua 文件</h2>\n<p>这样所有的协程可以共享这个 lua 文件</p>\n<p><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> mymod <span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mymod\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- 加载注入的模块</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    global_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    global_name <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">newReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    r <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>global_id<span class=\"token punctuation\">,</span>global_name<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- 连续执行三次</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span>\n    r<span class=\"token punctuation\">:</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span>\n    mymod<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"面包\"</span><span class=\"token punctuation\">)</span>\n    mymod<span class=\"token punctuation\">.</span><span class=\"token function\">drink</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"雪碧\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    mymod<span class=\"token punctuation\">.</span><span class=\"token function\">record</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h2 id=\"然后可以试试看啦\"><a class=\"anchor\" href=\"#然后可以试试看啦\">#</a> 然后可以试试看啦</h2>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bufio\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"github.com/yuin/gopher-lua\"</span>\n\t<span class=\"token string\">\"github.com/yuin/gopher-lua/parse\"</span>\n\t<span class=\"token string\">\"math/rand\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n\t<span class=\"token string\">\"sync\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// TODO: 加载 lua 代码执行</span>\n<span class=\"token comment\">// TODO: 多线程</span>\n\n<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tbooks <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token string\">\"活着\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"白鹿原\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"春秋战国\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"兄弟\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"许三观卖血记\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"丰乳肥臀\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tluaPath <span class=\"token operator\">:=</span> <span class=\"token string\">\"./main/test.lua\"</span>\n\tluaProto<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">compileFile</span><span class=\"token punctuation\">(</span>luaPath<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">DoRead</span><span class=\"token punctuation\">(</span>luaProto<span class=\"token punctuation\">,</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Reader\"</span><span class=\"token operator\">+</span>strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> books<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 机器人主流程</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">DoRead</span><span class=\"token punctuation\">(</span>luaProto <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>FunctionProto<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">uint32</span><span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> books <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n\tL <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">registerReaderType</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">PreloadModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mymod\"</span><span class=\"token punctuation\">,</span> Loader<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// 注入自己的模块</span>\n\tlFunc <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunctionFromProto</span><span class=\"token punctuation\">(</span>luaProto<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从字节码解析得到</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>lFunc<span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">PCall</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>MultRet<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// init</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span>\n\t\tFn<span class=\"token punctuation\">:</span>      L<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tNRet<span class=\"token punctuation\">:</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\tProtect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>LNil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 新建机器人</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"global_id\"</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LNumber</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"global_name\"</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span>\n\t\tFn<span class=\"token punctuation\">:</span>      L<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newReader\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tNRet<span class=\"token punctuation\">:</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\tProtect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>LNil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 读书</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\tbook <span class=\"token operator\">:=</span> books<span class=\"token punctuation\">[</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span>\n\t\t\tFn<span class=\"token punctuation\">:</span>      L<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tNRet<span class=\"token punctuation\">:</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\tProtect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 结束</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span>\n\t\tFn<span class=\"token punctuation\">:</span>      L<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tNRet<span class=\"token punctuation\">:</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\tProtect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>LNil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 解析文件变成 lua 字节码</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">compileFile</span><span class=\"token punctuation\">(</span>filePath <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>FunctionProto<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfile<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\treader <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n\tchunk<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> parse<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\tproto<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">Compile</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> proto<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n",
            "tags": [
                "golang实验室"
            ]
        },
        {
            "id": "https://fanlu.top/2023/05/17/gopher-lua%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "https://fanlu.top/2023/05/17/gopher-lua%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "gopher-lua的使用",
            "date_published": "2023-05-17T01:03:13.000Z",
            "content_html": "<p>#golang #lua #压测</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3l1aW4vZ29waGVyLWx1YSN1c2FnZQ==\">https://github.com/yuin/gopher-lua#usage</span></p>\n</blockquote>\n<h2 id=\"简单使用\"><a class=\"anchor\" href=\"#简单使用\">#</a> 简单使用</h2>\n<ol>\n<li>首先声明一个 lua 虚拟机： L := lua.NewState ()  返回一个 LState Struct</li>\n<li>然后可以执行 lua 格式的字符串或者 File\n<ul>\n<li>lua.DoString( <code>print(&quot;hello&quot;)</code> )</li>\n<li>lua.DoFile (lua 脚本的路径)</li>\n</ul>\n</li>\n</ol>\n<p>LState 定义如下：</p>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> LState <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tG       <span class=\"token operator\">*</span>Global\n\tParent  <span class=\"token operator\">*</span>LState\n\tEnv     <span class=\"token operator\">*</span>LTable\n\tPanic   <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>LState<span class=\"token punctuation\">)</span>\n\tDead    <span class=\"token builtin\">bool</span>\n\tOptions Options\n\n\tstop         <span class=\"token builtin\">int32</span>\n\treg          <span class=\"token operator\">*</span>registry\n\tstack        callFrameStack\n\talloc        <span class=\"token operator\">*</span>allocator\n\tcurrentFrame <span class=\"token operator\">*</span>callFrame\n\twrapped      <span class=\"token builtin\">bool</span>\n\tuvcache      <span class=\"token operator\">*</span>Upvalue\n\thasErrorFunc <span class=\"token builtin\">bool</span>\n\tmainLoop     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>LState<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>callFrame<span class=\"token punctuation\">)</span>\n\tctx          context<span class=\"token punctuation\">.</span>Context\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>Get 方法  获取栈中的变量</li>\n<li></li>\n</ul>\n<h2 id=\"数据模型\"><a class=\"anchor\" href=\"#数据模型\">#</a> 数据模型</h2>\n<p>gopher-lua 中的说有变量值都是一个 LValue, 是 go 语言中的 interface，包含两个方法：</p>\n<ul>\n<li>String（）string</li>\n<li>Type() LValueType<br />\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> LValue <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>  \n   <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>  \n   <span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> LValueType   \n   <span class=\"token function\">assertFloat64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>  \n   <span class=\"token function\">assertString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>  \n   <span class=\"token function\">assertFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>LFunction<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p>该接口的实现包括如下类：</p>\n<table>\n<thead>\n<tr>\n<th>Type name</th>\n<th>Go type</th>\n<th>Type() value</th>\n<th>Constants</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>LNilType</code></td>\n<td>(constants)</td>\n<td><code>LTNil</code></td>\n<td><code>LNil</code></td>\n</tr>\n<tr>\n<td><code>LBool</code></td>\n<td>(constants)</td>\n<td><code>LTBool</code></td>\n<td><code>LTrue</code> ,  <code>LFalse</code></td>\n</tr>\n<tr>\n<td><code>LNumber</code></td>\n<td>float64</td>\n<td><code>LTNumber</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LString</code></td>\n<td>string</td>\n<td><code>LTString</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LFunction</code></td>\n<td>struct pointer</td>\n<td><code>LTFunction</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LUserData</code></td>\n<td>struct pointer</td>\n<td><code>LTUserData</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LState</code></td>\n<td>struct pointer</td>\n<td><code>LTThread</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LTable</code></td>\n<td>struct pointer</td>\n<td><code>LTTable</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LChannel</code></td>\n<td>chan LValue</td>\n<td><code>LTChannel</code></td>\n<td><code>-</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>lv.Type () 可以获取类型</li>\n<li>原表不可用；没有错误捕捉</li>\n</ul>\n<h2 id=\"callstack-registry-size\"><a class=\"anchor\" href=\"#callstack-registry-size\">#</a> Callstack &amp; Registry size</h2>\n<p>LState 的调用栈的大小控制着脚本中 Lua 函数的最大调用深度（Go 函数的调用不算在内）。</p>\n<p>LState 的注册表实现了对调用函数（包括 Lua 和 Go 函数）和表达式中的临时变量的栈存储。它的存储需求将随着调用堆栈的使用和代码的复杂性而增加。</p>\n<p>注册表和调用堆栈都可以被设置为固定大小或自动大小。</p>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> L <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">&#123;</span>\n    RegistrySize<span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\">// this is the initial size of the registry</span>\n    RegistryMaxSize<span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// this is the maximum size that the registry can grow to. If set to `0` (the default) then the registry will not auto grow</span>\n    RegistryGrowStep<span class=\"token punctuation\">:</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// this is how much to step up the registry by each time it runs out of space. The default is `32`.</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">defer</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h2 id=\"api\"><a class=\"anchor\" href=\"#api\">#</a> API</h2>\n<h3 id=\"从lua中调用go函数\"><a class=\"anchor\" href=\"#从lua中调用go函数\">#</a> 从 lua 中调用 go 函数</h3>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Double</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    lv <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\">/* get argument */</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span><span class=\"token function\">LNumber</span><span class=\"token punctuation\">(</span>lv <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* push result */</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>                     <span class=\"token comment\">/* number of results */</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    L <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"double\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunction</span><span class=\"token punctuation\">(</span>Double<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* Original lua_setglobal uses stack... */</span>\n   \t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">DoString</span><span class=\"token punctuation\">(</span><span class=\"token string\">`print(double(20))`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>注册为 lua 函数之后，会变成一个 LGFunction 类型；</p>\n<p>支持协程中运行；</p>\n<h3 id=\"加载lua内置库的函数\"><a class=\"anchor\" href=\"#加载lua内置库的函数\">#</a> 加载 lua 内置库的函数</h3>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    L <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">&#123;</span>SkipOpenLibs<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> pair <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n        n <span class=\"token builtin\">string</span>\n        f lua<span class=\"token punctuation\">.</span>LGFunction\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">&#123;</span>lua<span class=\"token punctuation\">.</span>LoadLibName<span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>OpenPackage<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Must be first</span>\n        <span class=\"token punctuation\">&#123;</span>lua<span class=\"token punctuation\">.</span>BaseLibName<span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>OpenBase<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span>lua<span class=\"token punctuation\">.</span>TabLibName<span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>OpenTable<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span>\n            Fn<span class=\"token punctuation\">:</span>      L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunction</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            NRet<span class=\"token punctuation\">:</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            Protect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">DoFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main.lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h3 id=\"在go中创建一个lua的模块\"><a class=\"anchor\" href=\"#在go中创建一个lua的模块\">#</a> 在 go 中创建一个 lua 的模块</h3>\n<ol>\n<li>\n<p>首先定义一组方法  类型为 map [string] lua.LGFuntion</p>\n</li>\n<li>\n<p>然后调用 SetFuncs  将函数表分配给一个 lua table，作为一个模块，获取到一个 LTable</p>\n</li>\n<li>\n<p>然后将模块 push 到栈</p>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Loader</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// register functions to the table</span>\n    mod <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">SetFuncs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// register other stuff</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// returns the module</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>通过 PreLoadModule（name,  注册方法）将模块注册到虚拟机中</p>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">L<span class=\"token punctuation\">.</span><span class=\"token function\">PreloadModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mymodule\"</span><span class=\"token punctuation\">,</span> mymodule<span class=\"token punctuation\">.</span>Loader<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n</li>\n</ol>\n<h3 id=\"在go中调用lua方法\"><a class=\"anchor\" href=\"#在go中调用lua方法\">#</a> 在 go 中调用 lua 方法</h3>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span>\n    Fn<span class=\"token punctuation\">:</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"double\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//lua 方法名</span>\n    NRet<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\t\t\t\t\t<span class=\"token comment\">// </span>\n    Protect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>CallByParam 方法 第一个参数 lua.P 结构； 第二个参数 参数</li>\n<li>通过 lua.P 结构进行调用</li>\n<li>实际使用中 函数参数也可以使用提前设置全局变量的方式来实现</li>\n</ul>\n<h3 id=\"自定义类型\"><a class=\"anchor\" href=\"#自定义类型\">#</a> 自定义类型</h3>\n<p>支持在 Go 中自定义新类型</p>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Person <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n    Name <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> luaPersonTypeName <span class=\"token operator\">=</span> <span class=\"token string\">\"person\"</span>\n\n<span class=\"token comment\">// 注册类型</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">registerPersonType</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    mt <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTypeMetatable</span><span class=\"token punctuation\">(</span>luaPersonTypeName<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 新建一个元表</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person\"</span><span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">)</span>\t\t\t\t\t<span class=\"token comment\">// 元表设置为全局变量</span>\n    <span class=\"token comment\">// static attributes</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"new\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunction</span><span class=\"token punctuation\">(</span>newPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 注册方法到元表中 静态放啊</span>\n    <span class=\"token comment\">// methods</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__index\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">SetFuncs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> personMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 注册方法到元表</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Constructor</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">newPerson</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\t\t\t<span class=\"token comment\">//go 方法</span>\n    person <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Person<span class=\"token punctuation\">&#123;</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n    ud <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewUserData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ud<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> person\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetMetatable</span><span class=\"token punctuation\">(</span>ud<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypeMetatable</span><span class=\"token punctuation\">(</span>luaPersonTypeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>ud<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Checks whether the first lua argument is a *LUserData with *Person and returns this *Person.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">checkPerson</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Person <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 检查类型</span>\n    ud <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckUserData</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> ud<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> v\n    <span class=\"token punctuation\">&#125;</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">ArgError</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"person expected\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> personMethods <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>lua<span class=\"token punctuation\">.</span>LGFunction<span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 方法表</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> personGetSetName<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Getter and setter for the Person#Name</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">personGetSetName</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\t\t\t<span class=\"token comment\">// 属性的 Getter 和 Setter 在 lua 中通过 p:name () 调用</span>\n    p <span class=\"token operator\">:=</span> <span class=\"token function\">checkPerson</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">GetTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span>\n        p<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">&#125;</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    L <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">registerPersonType</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">DoString</span><span class=\"token punctuation\">(</span><span class=\"token string\">`\t\t\t\t\t\t\n        p = person.new(\"Steeve\")\t\n        print(p:name(\"新名字\")) --  \n\t\tprint(p:name())\n        p:name(\"Alice\")\n        print(p:name()) -- \"Alice\"\n    `</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h3 id=\"共享lua字节代码\"><a class=\"anchor\" href=\"#共享lua字节代码\">#</a> 共享 lua 字节代码</h3>\n<p>调用 DoFile 将加载一个 Lua 脚本，将其编译为字节码，并在一个 LState 中运行字节码。</p>\n<p>如果你有多个 LState，它们都需要运行同一个脚本，你可以在它们之间共享字节码，这将节省内存。共享字节码是安全的，因为它是只读的，不能被 lua 脚本所改变。</p>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// CompileLua reads the passed lua file from disk and compiles it.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">CompileLua</span><span class=\"token punctuation\">(</span>filePath <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>FunctionProto<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n    <span class=\"token punctuation\">&#125;</span>\n    reader <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n    chunk<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> parse<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n    <span class=\"token punctuation\">&#125;</span>\n    proto<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">Compile</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> proto<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// DoCompiledFile takes a FunctionProto, as returned by CompileLua, and runs it in the LState. It is equivalent</span>\n<span class=\"token comment\">// to calling DoFile on the LState with the original source file.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">DoCompiledFile</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">,</span> proto <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>FunctionProto<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n    lfunc <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunctionFromProto</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>lfunc<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">PCall</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>MultRet<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h3 id=\"go协程\"><a class=\"anchor\" href=\"#go协程\">#</a> go 协程</h3>\n<p>LState 不是 goroutine-safe。建议每个 goroutine 使用一个 LState，并通过使用通道在 goroutine 之间通信。</p>\n<p>通道在 GopherLua 中由通道对象表示。而一个通道表提供了执行通道操作的函数。</p>\n<p>有些对象不能通过通道发送，因为它本身有非 goroutine 安全的对象。</p>\n<p>一个线程 (state)<br />\n 一个函数<br />\n一个用户数据<br />\n一个有元数据的表</p>\n",
            "tags": [
                "golang实验室"
            ]
        }
    ]
}