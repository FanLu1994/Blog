{
    "version": "https://jsonfeed.org/version/1",
    "title": "何妨吟啸且徐行",
    "description": "",
    "home_page_url": "https://fanlu.top",
    "items": [
        {
            "id": "https://fanlu.top/2023/05/17/gopher-lua%E4%BD%BF%E7%94%A8%E5%B0%8Fdemo/",
            "url": "https://fanlu.top/2023/05/17/gopher-lua%E4%BD%BF%E7%94%A8%E5%B0%8Fdemo/",
            "title": "gopher-lua使用小demo",
            "date_published": "2023-05-17T01:04:08.000Z",
            "content_html": "<blockquote>\n<p>模拟读者读书</p>\n</blockquote>\n<h2 id=\"首先新建reader类\"><a class=\"anchor\" href=\"#首先新建reader类\">#</a> 首先新建 reader 类</h2>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">type</span> Reader <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tUid         <span class=\"token builtin\">uint32</span>\n\tUserName    <span class=\"token builtin\">string</span>\n\tReaderCount <span class=\"token builtin\">uint8</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>reader <span class=\"token operator\">*</span>Reader<span class=\"token punctuation\">)</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>book <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\treader<span class=\"token punctuation\">.</span>ReaderCount<span class=\"token operator\">++</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reader:%v,Name:%v,read book %v\\n\"</span><span class=\"token punctuation\">,</span> reader<span class=\"token punctuation\">.</span>Uid<span class=\"token punctuation\">,</span> reader<span class=\"token punctuation\">.</span>UserName<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h2 id=\"将reader类注册到lua中\"><a class=\"anchor\" href=\"#将reader类注册到lua中\">#</a> 将 reader 类注册到 lua 中</h2>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> lua <span class=\"token string\">\"github.com/yuin/gopher-lua\"</span>\n\n<span class=\"token keyword\">const</span> luaPersonTypeName <span class=\"token operator\">=</span> <span class=\"token string\">\"reader\"</span>\n\n<span class=\"token keyword\">var</span> readerMethods <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>lua<span class=\"token punctuation\">.</span>LGFunction<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token string\">\"read\"</span><span class=\"token punctuation\">:</span>     luaReaderRead<span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span> readerGetSetUsername<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 注册定义的类成为 lua 的一个元表</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">registerReaderType</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tmt <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTypeMetatable</span><span class=\"token punctuation\">(</span>luaPersonTypeName<span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reader\"</span><span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"new\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunction</span><span class=\"token punctuation\">(</span>luaNewReader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__index\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">SetFuncs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> readerMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//lua 创建对象方法</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">luaNewReader</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\treader <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Reader<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tL<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tud <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewUserData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\tud<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> reader\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetMetatable</span><span class=\"token punctuation\">(</span>ud<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypeMetatable</span><span class=\"token punctuation\">(</span>luaPersonTypeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>ud<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 在 lua 中获取对象的重要一步</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">checkReader</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Reader <span class=\"token punctuation\">&#123;</span>\n\tud <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckUserData</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> ud<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Reader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> v\n\t<span class=\"token punctuation\">&#125;</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">ArgError</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"reader expected\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 方法注册到 lua 中</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">luaReaderRead</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tr <span class=\"token operator\">:=</span> <span class=\"token function\">checkReader</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span>\n\tbook <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 属性的 get Set 方法， 注意方法名必须这样写：结构名 GetSet 属性名，大小写也要注意</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">readerGetSetUsername</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tr <span class=\"token operator\">:=</span> <span class=\"token function\">checkReader</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">GetTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span>\n\t\tr<span class=\"token punctuation\">.</span>UserName <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>UserName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h2 id=\"也许有一些模块需要注入到lua中\"><a class=\"anchor\" href=\"#也许有一些模块需要注入到lua中\">#</a> 也许有一些模块需要注入到 lua 中</h2>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\tlua <span class=\"token string\">\"github.com/yuin/gopher-lua\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> modFuncs <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>lua<span class=\"token punctuation\">.</span>LGFunction<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">:</span>    Eat<span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"drink\"</span><span class=\"token punctuation\">:</span>  Drink<span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">\"record\"</span><span class=\"token punctuation\">:</span> Record<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Eat</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tmsg <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat:\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Drink</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tmsg <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"drink:\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Record</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tr <span class=\"token operator\">:=</span> <span class=\"token function\">checkReader</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v读完了！一共%v本书！\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>UserName<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>ReaderCount<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">Loader</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n\tmod <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">SetFuncs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> modFuncs<span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mymod\"</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h2 id=\"预先定义一个lua文件\"><a class=\"anchor\" href=\"#预先定义一个lua文件\">#</a> 预先定义一个 lua 文件</h2>\n<p>这样所有的协程可以共享这个 lua 文件</p>\n<p><pre class=\"line-numbers language-lua\" data-language=\"lua\"><code class=\"language-lua\"><span class=\"token keyword\">local</span> mymod <span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mymod\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- 加载注入的模块</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    global_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    global_name <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">newReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    r <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>global_id<span class=\"token punctuation\">,</span>global_name<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token comment\">-- 连续执行三次</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span>\n    r<span class=\"token punctuation\">:</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span>\n    mymod<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"面包\"</span><span class=\"token punctuation\">)</span>\n    mymod<span class=\"token punctuation\">.</span><span class=\"token function\">drink</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"雪碧\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    mymod<span class=\"token punctuation\">.</span><span class=\"token function\">record</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h2 id=\"然后可以试试看啦\"><a class=\"anchor\" href=\"#然后可以试试看啦\">#</a> 然后可以试试看啦</h2>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"bufio\"</span>\n\t<span class=\"token string\">\"fmt\"</span>\n\t<span class=\"token string\">\"github.com/yuin/gopher-lua\"</span>\n\t<span class=\"token string\">\"github.com/yuin/gopher-lua/parse\"</span>\n\t<span class=\"token string\">\"math/rand\"</span>\n\t<span class=\"token string\">\"os\"</span>\n\t<span class=\"token string\">\"strconv\"</span>\n\t<span class=\"token string\">\"sync\"</span>\n\t<span class=\"token string\">\"time\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// TODO: 加载 lua 代码执行</span>\n<span class=\"token comment\">// TODO: 多线程</span>\n\n<span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tbooks <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token string\">\"活着\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"白鹿原\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"春秋战国\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"兄弟\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"许三观卖血记\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"丰乳肥臀\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\tluaPath <span class=\"token operator\">:=</span> <span class=\"token string\">\"./main/test.lua\"</span>\n\tluaProto<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">compileFile</span><span class=\"token punctuation\">(</span>luaPath<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">DoRead</span><span class=\"token punctuation\">(</span>luaProto<span class=\"token punctuation\">,</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Reader\"</span><span class=\"token operator\">+</span>strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> books<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 机器人主流程</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">DoRead</span><span class=\"token punctuation\">(</span>luaProto <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>FunctionProto<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">uint32</span><span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> books <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n\tL <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">registerReaderType</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">PreloadModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mymod\"</span><span class=\"token punctuation\">,</span> Loader<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// 注入自己的模块</span>\n\tlFunc <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunctionFromProto</span><span class=\"token punctuation\">(</span>luaProto<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从字节码解析得到</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>lFunc<span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">PCall</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>MultRet<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// init</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span>\n\t\tFn<span class=\"token punctuation\">:</span>      L<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tNRet<span class=\"token punctuation\">:</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\tProtect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>LNil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 新建机器人</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"global_id\"</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LNumber</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"global_name\"</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span>\n\t\tFn<span class=\"token punctuation\">:</span>      L<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newReader\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tNRet<span class=\"token punctuation\">:</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\tProtect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>LNil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 读书</span>\n\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span>\n\t\tbook <span class=\"token operator\">:=</span> books<span class=\"token punctuation\">[</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span>\n\t\t\tFn<span class=\"token punctuation\">:</span>      L<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\tNRet<span class=\"token punctuation\">:</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\tProtect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#125;</span>\n\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\n\t<span class=\"token comment\">// 结束</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span>\n\t\tFn<span class=\"token punctuation\">:</span>      L<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\tNRet<span class=\"token punctuation\">:</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\tProtect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>LNil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 解析文件变成 lua 字节码</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">compileFile</span><span class=\"token punctuation\">(</span>filePath <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>FunctionProto<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfile<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\treader <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n\tchunk<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> parse<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\tproto<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">Compile</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> proto<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n",
            "tags": []
        },
        {
            "id": "https://fanlu.top/2023/05/17/gopher-lua%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "https://fanlu.top/2023/05/17/gopher-lua%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "gopher-lua的使用",
            "date_published": "2023-05-17T01:03:13.000Z",
            "content_html": "<p>#golang #lua #压测</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3l1aW4vZ29waGVyLWx1YSN1c2FnZQ==\">https://github.com/yuin/gopher-lua#usage</span></p>\n</blockquote>\n<h2 id=\"简单使用\"><a class=\"anchor\" href=\"#简单使用\">#</a> 简单使用</h2>\n<ol>\n<li>首先声明一个 lua 虚拟机： L := lua.NewState ()  返回一个 LState Struct</li>\n<li>然后可以执行 lua 格式的字符串或者 File\n<ul>\n<li>lua.DoString( <code>print(&quot;hello&quot;)</code> )</li>\n<li>lua.DoFile (lua 脚本的路径)</li>\n</ul>\n</li>\n</ol>\n<p>LState 定义如下：</p>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> LState <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n\tG       <span class=\"token operator\">*</span>Global\n\tParent  <span class=\"token operator\">*</span>LState\n\tEnv     <span class=\"token operator\">*</span>LTable\n\tPanic   <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>LState<span class=\"token punctuation\">)</span>\n\tDead    <span class=\"token builtin\">bool</span>\n\tOptions Options\n\n\tstop         <span class=\"token builtin\">int32</span>\n\treg          <span class=\"token operator\">*</span>registry\n\tstack        callFrameStack\n\talloc        <span class=\"token operator\">*</span>allocator\n\tcurrentFrame <span class=\"token operator\">*</span>callFrame\n\twrapped      <span class=\"token builtin\">bool</span>\n\tuvcache      <span class=\"token operator\">*</span>Upvalue\n\thasErrorFunc <span class=\"token builtin\">bool</span>\n\tmainLoop     <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>LState<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>callFrame<span class=\"token punctuation\">)</span>\n\tctx          context<span class=\"token punctuation\">.</span>Context\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>Get 方法  获取栈中的变量</li>\n<li></li>\n</ul>\n<h2 id=\"数据模型\"><a class=\"anchor\" href=\"#数据模型\">#</a> 数据模型</h2>\n<p>gopher-lua 中的说有变量值都是一个 LValue, 是 go 语言中的 interface，包含两个方法：</p>\n<ul>\n<li>String（）string</li>\n<li>Type() LValueType<br />\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> LValue <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>  \n   <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>  \n   <span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> LValueType   \n   <span class=\"token function\">assertFloat64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>  \n   <span class=\"token function\">assertString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>  \n   <span class=\"token function\">assertFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>LFunction<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<p>该接口的实现包括如下类：</p>\n<table>\n<thead>\n<tr>\n<th>Type name</th>\n<th>Go type</th>\n<th>Type() value</th>\n<th>Constants</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>LNilType</code></td>\n<td>(constants)</td>\n<td><code>LTNil</code></td>\n<td><code>LNil</code></td>\n</tr>\n<tr>\n<td><code>LBool</code></td>\n<td>(constants)</td>\n<td><code>LTBool</code></td>\n<td><code>LTrue</code> ,  <code>LFalse</code></td>\n</tr>\n<tr>\n<td><code>LNumber</code></td>\n<td>float64</td>\n<td><code>LTNumber</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LString</code></td>\n<td>string</td>\n<td><code>LTString</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LFunction</code></td>\n<td>struct pointer</td>\n<td><code>LTFunction</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LUserData</code></td>\n<td>struct pointer</td>\n<td><code>LTUserData</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LState</code></td>\n<td>struct pointer</td>\n<td><code>LTThread</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LTable</code></td>\n<td>struct pointer</td>\n<td><code>LTTable</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LChannel</code></td>\n<td>chan LValue</td>\n<td><code>LTChannel</code></td>\n<td><code>-</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>lv.Type () 可以获取类型</li>\n<li>原表不可用；没有错误捕捉</li>\n</ul>\n<h2 id=\"callstack-registry-size\"><a class=\"anchor\" href=\"#callstack-registry-size\">#</a> Callstack &amp; Registry size</h2>\n<p>LState 的调用栈的大小控制着脚本中 Lua 函数的最大调用深度（Go 函数的调用不算在内）。</p>\n<p>LState 的注册表实现了对调用函数（包括 Lua 和 Go 函数）和表达式中的临时变量的栈存储。它的存储需求将随着调用堆栈的使用和代码的复杂性而增加。</p>\n<p>注册表和调用堆栈都可以被设置为固定大小或自动大小。</p>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"> L <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">&#123;</span>\n    RegistrySize<span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\">// this is the initial size of the registry</span>\n    RegistryMaxSize<span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// this is the maximum size that the registry can grow to. If set to `0` (the default) then the registry will not auto grow</span>\n    RegistryGrowStep<span class=\"token punctuation\">:</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// this is how much to step up the registry by each time it runs out of space. The default is `32`.</span>\n <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">defer</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h2 id=\"api\"><a class=\"anchor\" href=\"#api\">#</a> API</h2>\n<h3 id=\"从lua中调用go函数\"><a class=\"anchor\" href=\"#从lua中调用go函数\">#</a> 从 lua 中调用 go 函数</h3>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Double</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    lv <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\">/* get argument */</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span><span class=\"token function\">LNumber</span><span class=\"token punctuation\">(</span>lv <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* push result */</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>                     <span class=\"token comment\">/* number of results */</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    L <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"double\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunction</span><span class=\"token punctuation\">(</span>Double<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* Original lua_setglobal uses stack... */</span>\n   \t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">DoString</span><span class=\"token punctuation\">(</span><span class=\"token string\">`print(double(20))`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>注册为 lua 函数之后，会变成一个 LGFunction 类型；</p>\n<p>支持协程中运行；</p>\n<h3 id=\"加载lua内置库的函数\"><a class=\"anchor\" href=\"#加载lua内置库的函数\">#</a> 加载 lua 内置库的函数</h3>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    L <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">&#123;</span>SkipOpenLibs<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> pair <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n        n <span class=\"token builtin\">string</span>\n        f lua<span class=\"token punctuation\">.</span>LGFunction\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token punctuation\">&#123;</span>lua<span class=\"token punctuation\">.</span>LoadLibName<span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>OpenPackage<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Must be first</span>\n        <span class=\"token punctuation\">&#123;</span>lua<span class=\"token punctuation\">.</span>BaseLibName<span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>OpenBase<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#123;</span>lua<span class=\"token punctuation\">.</span>TabLibName<span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>OpenTable<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span>\n            Fn<span class=\"token punctuation\">:</span>      L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunction</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            NRet<span class=\"token punctuation\">:</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n            Protect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">DoFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main.lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h3 id=\"在go中创建一个lua的模块\"><a class=\"anchor\" href=\"#在go中创建一个lua的模块\">#</a> 在 go 中创建一个 lua 的模块</h3>\n<ol>\n<li>\n<p>首先定义一组方法  类型为 map [string] lua.LGFuntion</p>\n</li>\n<li>\n<p>然后调用 SetFuncs  将函数表分配给一个 lua table，作为一个模块，获取到一个 LTable</p>\n</li>\n<li>\n<p>然后将模块 push 到栈</p>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">Loader</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// register functions to the table</span>\n    mod <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">SetFuncs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// register other stuff</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">// returns the module</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n</li>\n<li>\n<p>通过 PreLoadModule（name,  注册方法）将模块注册到虚拟机中</p>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">L<span class=\"token punctuation\">.</span><span class=\"token function\">PreloadModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mymodule\"</span><span class=\"token punctuation\">,</span> mymodule<span class=\"token punctuation\">.</span>Loader<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></p>\n</li>\n</ol>\n<h3 id=\"在go中调用lua方法\"><a class=\"anchor\" href=\"#在go中调用lua方法\">#</a> 在 go 中调用 lua 方法</h3>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span>\n    Fn<span class=\"token punctuation\">:</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"double\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//lua 方法名</span>\n    NRet<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\t\t\t\t\t<span class=\"token comment\">// </span>\n    Protect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<ul>\n<li>CallByParam 方法 第一个参数 lua.P 结构； 第二个参数 参数</li>\n<li>通过 lua.P 结构进行调用</li>\n<li>实际使用中 函数参数也可以使用提前设置全局变量的方式来实现</li>\n</ul>\n<h3 id=\"自定义类型\"><a class=\"anchor\" href=\"#自定义类型\">#</a> 自定义类型</h3>\n<p>支持在 Go 中自定义新类型</p>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">type</span> Person <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span>\n    Name <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">const</span> luaPersonTypeName <span class=\"token operator\">=</span> <span class=\"token string\">\"person\"</span>\n\n<span class=\"token comment\">// 注册类型</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">registerPersonType</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    mt <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTypeMetatable</span><span class=\"token punctuation\">(</span>luaPersonTypeName<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 新建一个元表</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person\"</span><span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">)</span>\t\t\t\t\t<span class=\"token comment\">// 元表设置为全局变量</span>\n    <span class=\"token comment\">// static attributes</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"new\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunction</span><span class=\"token punctuation\">(</span>newPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 注册方法到元表中 静态放啊</span>\n    <span class=\"token comment\">// methods</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__index\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">SetFuncs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> personMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 注册方法到元表</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Constructor</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">newPerson</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\t\t\t<span class=\"token comment\">//go 方法</span>\n    person <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Person<span class=\"token punctuation\">&#123;</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n    ud <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewUserData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    ud<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> person\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetMetatable</span><span class=\"token punctuation\">(</span>ud<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypeMetatable</span><span class=\"token punctuation\">(</span>luaPersonTypeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>ud<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Checks whether the first lua argument is a *LUserData with *Person and returns this *Person.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">checkPerson</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Person <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 检查类型</span>\n    ud <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckUserData</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> ud<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> v\n    <span class=\"token punctuation\">&#125;</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">ArgError</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"person expected\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">var</span> personMethods <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>lua<span class=\"token punctuation\">.</span>LGFunction<span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 方法表</span>\n    <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> personGetSetName<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// Getter and setter for the Person#Name</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">personGetSetName</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\t\t\t<span class=\"token comment\">// 属性的 Getter 和 Setter 在 lua 中通过 p:name () 调用</span>\n    p <span class=\"token operator\">:=</span> <span class=\"token function\">checkPerson</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">GetTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span>\n        p<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">&#125;</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    L <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">registerPersonType</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">DoString</span><span class=\"token punctuation\">(</span><span class=\"token string\">`\t\t\t\t\t\t\n        p = person.new(\"Steeve\")\t\n        print(p:name(\"新名字\")) --  \n\t\tprint(p:name())\n        p:name(\"Alice\")\n        print(p:name()) -- \"Alice\"\n    `</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h3 id=\"共享lua字节代码\"><a class=\"anchor\" href=\"#共享lua字节代码\">#</a> 共享 lua 字节代码</h3>\n<p>调用 DoFile 将加载一个 Lua 脚本，将其编译为字节码，并在一个 LState 中运行字节码。</p>\n<p>如果你有多个 LState，它们都需要运行同一个脚本，你可以在它们之间共享字节码，这将节省内存。共享字节码是安全的，因为它是只读的，不能被 lua 脚本所改变。</p>\n<p><pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// CompileLua reads the passed lua file from disk and compiles it.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">CompileLua</span><span class=\"token punctuation\">(</span>filePath <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>FunctionProto<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n    <span class=\"token punctuation\">&#125;</span>\n    reader <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span>\n    chunk<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> parse<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n    <span class=\"token punctuation\">&#125;</span>\n    proto<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">Compile</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> proto<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// DoCompiledFile takes a FunctionProto, as returned by CompileLua, and runs it in the LState. It is equivalent</span>\n<span class=\"token comment\">// to calling DoFile on the LState with the original source file.</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">DoCompiledFile</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">,</span> proto <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>FunctionProto<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span>\n    lfunc <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunctionFromProto</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span>\n    L<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>lfunc<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">PCall</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>MultRet<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<h3 id=\"go协程\"><a class=\"anchor\" href=\"#go协程\">#</a> go 协程</h3>\n<p>LState 不是 goroutine-safe。建议每个 goroutine 使用一个 LState，并通过使用通道在 goroutine 之间通信。</p>\n<p>通道在 GopherLua 中由通道对象表示。而一个通道表提供了执行通道操作的函数。</p>\n<p>有些对象不能通过通道发送，因为它本身有非 goroutine 安全的对象。</p>\n<p>一个线程 (state)<br />\n 一个函数<br />\n一个用户数据<br />\n一个有元数据的表</p>\n",
            "tags": []
        },
        {
            "id": "https://fanlu.top/2023/05/16/vben-admin%E6%8D%A2%E8%82%A4%E5%AE%9E%E7%8E%B0/",
            "url": "https://fanlu.top/2023/05/16/vben-admin%E6%8D%A2%E8%82%A4%E5%AE%9E%E7%8E%B0/",
            "title": "vben-admin换肤实现",
            "date_published": "2023-05-16T00:19:08.000Z",
            "content_html": "<p>最近在 github 上看到了一个后台管理的前端项目，使用了 vue3+ts+vite+ant-vue 的技术，看起来很不错，功能特别丰富，clone 下来发现代码也写的特别好，比我现在的小白代码根本不在同一个等级，因此想要学习一下。 个人觉得从一个功能抽丝剥茧来学习一个功能的写法可能会对自己的技术提高有帮助。</p>\n<p>项目中的侧边栏提供了超多的主题选项，可以丰富的变换主题。因此本文想分析一下这个换肤是如何实现的。</p>\n<p><img data-src=\"https://secure2.wostatic.cn/static/wGUf6UvBJUZVXfAPhrzaF/image.png?auth_key=1684196309-2jkBMzvREcZ21xSJjxnEvU-0-4173f6dd779469091bae7835b4c93aa7\" alt=\"\" /></p>\n<h2 id=\"黑色亮色主题切换\"><a class=\"anchor\" href=\"#黑色亮色主题切换\">#</a> 黑色 / 亮色主题切换</h2>\n<p>主题切换组件 AppDarkModeToggle.vue</p>\n<ul>\n<li>定义点击事件 toggleDarkMode\n<ol>\n<li>\n<p>调用设置黑色主题函数 setDarkMode</p>\n<p>修改 pinia 状态中的 dark 模式，并将变量存储到 localStorage 中</p>\n</li>\n<li>\n<p>调用 updateDarkTheme</p>\n<ul>\n<li>获取 htmlRoot dom 节点，即本项目应用的根节点</li>\n<li>判断根节点是否包含 dark class 定义</li>\n<li>如果是 dark\n<ul>\n<li>判断是否为生产模式，并加载 dark 主题 css（由 vite-plugin-theme 支持）</li>\n<li>将根节点的 data-teme 设置为 dark</li>\n<li>并添加 class 为 dark</li>\n</ul>\n</li>\n<li>如果不是 dark\n<ul>\n<li>将根节点 data-theme 设置为 light</li>\n<li>并且移除 dark class</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<p><pre class=\"line-numbers language-Python\" data-language=\"Python\"><code class=\"language-Python\">这里修改data-theme为dark，利用了less中条件判断语句\n例如：\n\n  html[data-theme&#x3D;&#39;dark&#39;] &#123;\n    .@&#123;prefix-cls&#125; &#123;\n      border: 1px solid rgb(196 188 188);\n    &#125;\n  &#125;\n\nps：less还支持动态变量名，6666<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br />\n3. 调用 updateHeaderBgColor 修改 header 的背景色<br />\n - 判断是否为 dark 模式，获取到颜色，如果不是暗色，那就获取当前设置的颜色<br />\n color = appStore.getHeaderSetting.bgColor;<br />\n- 将获取到的颜色设置 css 变量  setCssVar</p>\n<p><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">export function setCssVar(prop: string, val: any, dom &#x3D; docEle) &#123;\n  console.log(prop,val)\n  dom.style.setProperty(prop, val);\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre><br />\n- 计算得到 hover 颜色（亮度提高 6），同样设置 css 变量</p>\n<pre><code>        这里用到了自定义的颜色函数，我觉得很有用\n</code></pre>\n<p><pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">&#x2F;**\n * 判断是否 十六进制颜色值.\n * 输入形式可为 #fff000 #f00\n *\n * @param   String  color   十六进制颜色值\n * @return  Boolean\n *&#x2F;\nexport function isHexColor(color: string) &#123;\n  const reg &#x3D; &#x2F;^#([0-9a-fA-F]&#123;3&#125;|[0-9a-fA-f]&#123;6&#125;)$&#x2F;;\n  return reg.test(color);\n&#125;\n\n&#x2F;**\n * RGB 颜色值转换为 十六进制颜色值.\n * r, g, 和 b 需要在 [0, 255] 范围内\n *\n * @return  String          类似#ff00ff\n * @param r\n * @param g\n * @param b\n *&#x2F;\nexport function rgbToHex(r: number, g: number, b: number) &#123;\n  &#x2F;&#x2F; tslint:disable-next-line:no-bitwise\n  const hex &#x3D; ((r &lt;&lt; 16) | (g &lt;&lt; 8) | b).toString(16);\n  return &#39;#&#39; + new Array(Math.abs(hex.length - 7)).join(&#39;0&#39;) + hex;\n&#125;\n\n&#x2F;**\n * Transform a HEX color to its RGB representation\n * @param &#123;string&#125; hex The color to transform\n * @returns The RGB representation of the passed color\n *&#x2F;\nexport function hexToRGB(hex: string) &#123;\n  let sHex &#x3D; hex.toLowerCase();\n  if (isHexColor(hex)) &#123;\n    if (sHex.length &#x3D;&#x3D;&#x3D; 4) &#123;\n      let sColorNew &#x3D; &#39;#&#39;;\n      for (let i &#x3D; 1; i &lt; 4; i +&#x3D; 1) &#123;\n        sColorNew +&#x3D; sHex.slice(i, i + 1).concat(sHex.slice(i, i + 1));\n      &#125;\n      sHex &#x3D; sColorNew;\n    &#125;\n    const sColorChange: number[] &#x3D; [];\n    for (let i &#x3D; 1; i &lt; 7; i +&#x3D; 2) &#123;\n      sColorChange.push(parseInt(&#39;0x&#39; + sHex.slice(i, i + 2)));\n    &#125;\n    return &#39;RGB(&#39; + sColorChange.join(&#39;,&#39;) + &#39;)&#39;;\n  &#125;\n  return sHex;\n&#125;\n\nexport function colorIsDark(color: string) &#123;\n  if (!isHexColor(color)) return;\n  const [r, g, b] &#x3D; hexToRGB(color)\n    .replace(&#x2F;(?:\\(|\\)|rgb|RGB)*&#x2F;g, &#39;&#39;)\n    .split(&#39;,&#39;)\n    .map((item) &#x3D;&gt; Number(item));\n  return r * 0.299 + g * 0.578 + b * 0.114 &lt; 192;\n&#125;\n\n&#x2F;**\n * Darkens a HEX color given the passed percentage\n * @param &#123;string&#125; color The color to process\n * @param &#123;number&#125; amount The amount to change the color by\n * @returns &#123;string&#125; The HEX representation of the processed color\n *&#x2F;\nexport function darken(color: string, amount: number) &#123;\n  color &#x3D; color.indexOf(&#39;#&#39;) &gt;&#x3D; 0 ? color.substring(1, color.length) : color;\n  amount &#x3D; Math.trunc((255 * amount) &#x2F; 100);\n  return &#96;#$&#123;subtractLight(color.substring(0, 2), amount)&#125;$&#123;subtractLight(\n    color.substring(2, 4),\n    amount,\n  )&#125;$&#123;subtractLight(color.substring(4, 6), amount)&#125;&#96;;\n&#125;\n\n&#x2F;**\n * Lightens a 6 char HEX color according to the passed percentage\n * @param &#123;string&#125; color The color to change\n * @param &#123;number&#125; amount The amount to change the color by\n * @returns &#123;string&#125; The processed color represented as HEX\n *&#x2F;\nexport function lighten(color: string, amount: number) &#123;\n  color &#x3D; color.indexOf(&#39;#&#39;) &gt;&#x3D; 0 ? color.substring(1, color.length) : color;\n  amount &#x3D; Math.trunc((255 * amount) &#x2F; 100);\n  return &#96;#$&#123;addLight(color.substring(0, 2), amount)&#125;$&#123;addLight(\n    color.substring(2, 4),\n    amount,\n  )&#125;$&#123;addLight(color.substring(4, 6), amount)&#125;&#96;;\n&#125;\n\n&#x2F;* Suma el porcentaje indicado a un color (RR, GG o BB) hexadecimal para aclararlo *&#x2F;\n&#x2F;**\n * Sums the passed percentage to the R, G or B of a HEX color\n * @param &#123;string&#125; color The color to change\n * @param &#123;number&#125; amount The amount to change the color by\n * @returns &#123;string&#125; The processed part of the color\n *&#x2F;\nfunction addLight(color: string, amount: number) &#123;\n  const cc &#x3D; parseInt(color, 16) + amount;\n  const c &#x3D; cc &gt; 255 ? 255 : cc;\n  return c.toString(16).length &gt; 1 ? c.toString(16) : &#96;0$&#123;c.toString(16)&#125;&#96;;\n&#125;\n\n&#x2F;**\n * Calculates luminance of an rgb color\n * @param &#123;number&#125; r red\n * @param &#123;number&#125; g green\n * @param &#123;number&#125; b blue\n *&#x2F;\nfunction luminanace(r: number, g: number, b: number) &#123;\n  const a &#x3D; [r, g, b].map((v) &#x3D;&gt; &#123;\n    v &#x2F;&#x3D; 255;\n    return v &lt;&#x3D; 0.03928 ? v &#x2F; 12.92 : Math.pow((v + 0.055) &#x2F; 1.055, 2.4);\n  &#125;);\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n&#125;\n\n&#x2F;**\n * Calculates contrast between two rgb colors\n * @param &#123;string&#125; rgb1 rgb color 1\n * @param &#123;string&#125; rgb2 rgb color 2\n *&#x2F;\nfunction contrast(rgb1: string[], rgb2: number[]) &#123;\n  return (\n    (luminanace(~~rgb1[0], ~~rgb1[1], ~~rgb1[2]) + 0.05) &#x2F;\n    (luminanace(rgb2[0], rgb2[1], rgb2[2]) + 0.05)\n  );\n&#125;\n\n&#x2F;**\n * Determines what the best text color is (black or white) based con the contrast with the background\n * @param hexColor - Last selected color by the user\n *&#x2F;\nexport function calculateBestTextColor(hexColor: string) &#123;\n  const rgbColor &#x3D; hexToRGB(hexColor.substring(1));\n  const contrastWithBlack &#x3D; contrast(rgbColor.split(&#39;,&#39;), [0, 0, 0]);\n\n  return contrastWithBlack &gt;&#x3D; 12 ? &#39;#000000&#39; : &#39;#FFFFFF&#39;;\n&#125;\n\n&#x2F;**\n * Subtracts the indicated percentage to the R, G or B of a HEX color\n * @param &#123;string&#125; color The color to change\n * @param &#123;number&#125; amount The amount to change the color by\n * @returns &#123;string&#125; The processed part of the color\n *&#x2F;\nfunction subtractLight(color: string, amount: number) &#123;\n  const cc &#x3D; parseInt(color, 16) - amount;\n  const c &#x3D; cc &lt; 0 ? 0 : cc;\n  return c.toString(16).length &gt; 1 ? c.toString(16) : &#96;0$&#123;c.toString(16)&#125;&#96;;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br />\n- updateSidebarBgColor  修改侧边栏颜色 原理同上</p>\n<p>以上大概有几个关键点：</p>\n<ol>\n<li>充分利用 less 的用法\n<ul>\n<li>条件语句</li>\n<li>动态前缀变量名</li>\n</ul>\n</li>\n<li>利用 js 来修改原生 css 变量的颜色，同时计算悬浮颜色</li>\n<li>项目中大部分样式类名以前缀方式定义，主 less 中定义了一个 vben 为 namespace，在 less 中作为全局变量；而 designSetting 中定义了 prefixCls 在 ts 中作为全局变量。 他们存在这对应关系，因此需要同时修改才能起作用。</li>\n</ol>\n<h2 id=\"导航栏模式切换\"><a class=\"anchor\" href=\"#导航栏模式切换\">#</a> 导航栏模式切换</h2>\n<blockquote>\n<p>导航栏模式分为了四种：</p>\n</blockquote>\n<p><img data-src=\"https://secure2.wostatic.cn/static/sPjnd9xQ7suquNPauh5Qqw/image.png?auth_key=1684196309-2o96KrtYmowc5t254R8edZ-0-bbe91f85e3201ce1060d94391f94427b\" alt=\"\" /></p>\n<ol>\n<li>左边可折叠菜单，右边上部面包屑，下部内容</li>\n<li>上下布局，上部面包屑，下面左边菜单右边内容</li>\n<li>上下布局，上面菜单，下面内容</li>\n<li>左右布局，左边菜单点击展开子目录，右上方面包屑，下方内容</li>\n</ol>\n<p>右边的样式选项都是通过自定义的 Picker 组件来实现的，导航栏模式选择的是 TypePicker 组件，传入的方法是 baseHandler:</p>\n<p><pre class=\"line-numbers language-Vue\" data-language=\"Vue\"><code class=\"language-Vue\">&lt;TypePicker\n   menuTypeList&#x3D;&#123;menuTypeList&#125;\n   handler&#x3D;&#123;(item: typeof menuTypeList[0]) &#x3D;&gt; &#123;\n     baseHandler(HandlerEnum.CHANGE_LAYOUT, &#123;\n       mode: item.mode,\n       type: item.type,\n       split: unref(getIsHorizontal) ? false : undefined,\n     &#125;);\n   &#125;&#125;\n   def&#x3D;&#123;unref(getMenuType)&#125;\n &#x2F;&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>其中 menuTypeList 表示上方提到的四种模式，其定义如下：</p>\n<p><pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">export const menuTypeList &#x3D; [\n  &#123;\n    title: t(&#39;layout.setting.menuTypeSidebar&#39;),\n    mode: MenuModeEnum.INLINE,\n    type: MenuTypeEnum.SIDEBAR,\n  &#125;,\n  &#123;\n    title: t(&#39;layout.setting.menuTypeMix&#39;),\n    mode: MenuModeEnum.INLINE,\n    type: MenuTypeEnum.MIX,\n  &#125;,\n\n  &#123;\n    title: t(&#39;layout.setting.menuTypeTopMenu&#39;),\n    mode: MenuModeEnum.HORIZONTAL,\n    type: MenuTypeEnum.TOP_MENU,\n  &#125;,\n  &#123;\n    title: t(&#39;layout.setting.menuTypeMixSidebar&#39;),\n    mode: MenuModeEnum.INLINE,\n    type: MenuTypeEnum.MIX_SIDEBAR,\n  &#125;,\n];<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<blockquote>\n<p>ps: 由样式定义来看，less 支持不同状态下，class 后面拼接字符串的样式，比如 &amp;--active</p>\n</blockquote>\n<p>调用 handler 函数：</p>\n<ol>\n<li>获取 appStore 配置信息</li>\n<li>根据传来的 mode 和 type 生成新的 menuSetting</li>\n<li>将新的配置更新到 pinia 全局配置中</li>\n<li>更新来的配置几乎每一个属性都封装为一个 computed</li>\n</ol>\n<p><pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">export interface MenuSetting &#123;\n  bgColor: string;\n  fixed: boolean;\n  collapsed: boolean;\n  siderHidden: boolean;\n  canDrag: boolean;\n  show: boolean;\n  hidden: boolean;\n  split: boolean;\n  menuWidth: number;\n  mode: MenuModeEnum;\n  type: MenuTypeEnum;\n  theme: ThemeEnum;\n  topMenuAlign: &#39;start&#39; | &#39;center&#39; | &#39;end&#39;;\n  trigger: TriggerEnum;\n  accordion: boolean;\n  closeMixSidebarOnChange: boolean;\n  collapsedShowTitle: boolean;\n  mixSideTrigger: MixSidebarTriggerEnum;\n  mixSideFixed: boolean;\n&#125;\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>全都定义在 useMenuSetting.ts 中，这是一个<strong>自定义 hook</strong></p>\n<h2 id=\"系统主题切换\"><a class=\"anchor\" href=\"#系统主题切换\">#</a> 系统主题切换</h2>\n<p>自定义组件 ThemeColorPicker 实现，包含三个 prop</p>\n<ol>\n<li>颜色列表</li>\n<li>默认颜色 通过 getThemeColor 计算属性获取（真实来源自 pinia 中存储的 themeColor）** 默认值都配置在 src/projectSetting.ts 下面 **</li>\n<li>event，表示事件 ID</li>\n</ol>\n<p>通过点击事件，调用 baseHandle 修改全局配置；</p>\n<p>调用 generateColors 方法生成一组颜色，这组颜色的计算可以参考：</p>\n<p><pre class=\"line-numbers language-TypeScript\" data-language=\"TypeScript\"><code class=\"language-TypeScript\">export function generateColors(&#123;\n  color &#x3D; primaryColor,\n  mixLighten,\n  mixDarken,\n  tinycolor,\n&#125;: GenerateColorsParams) &#123;\n  const arr &#x3D; new Array(19).fill(0);\n  const lightens &#x3D; arr.map((_t, i) &#x3D;&gt; &#123;\n    return mixLighten(color, i &#x2F; 5);\n  &#125;);\n\n  const darkens &#x3D; arr.map((_t, i) &#x3D;&gt; &#123;\n    return mixDarken(color, i &#x2F; 5);\n  &#125;);\n\n  const alphaColors &#x3D; arr.map((_t, i) &#x3D;&gt; &#123;\n    return tinycolor(color)\n      .setAlpha(i &#x2F; 20)\n      .toRgbString();\n  &#125;);\n\n  const shortAlphaColors &#x3D; alphaColors.map((item) &#x3D;&gt; item.replace(&#x2F;\\s&#x2F;g, &#39;&#39;).replace(&#x2F;0\\.&#x2F;g, &#39;.&#39;));\n\n  const tinycolorLightens &#x3D; arr\n    .map((_t, i) &#x3D;&gt; &#123;\n      return tinycolor(color)\n        .lighten(i * 5)\n        .toHexString();\n    &#125;)\n    .filter((item) &#x3D;&gt; item !&#x3D;&#x3D; &#39;#ffffff&#39;);\n\n  const tinycolorDarkens &#x3D; arr\n    .map((_t, i) &#x3D;&gt; &#123;\n      return tinycolor(color)\n        .darken(i * 5)\n        .toHexString();\n    &#125;)\n    .filter((item) &#x3D;&gt; item !&#x3D;&#x3D; &#39;#000000&#39;);\n  return [\n    ...lightens,\n    ...darkens,\n    ...alphaColors,\n    ...shortAlphaColors,\n    ...tinycolorDarkens,\n    ...tinycolorLightens,\n  ].filter((item) &#x3D;&gt; !item.includes(&#39;-&#39;));\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>然后利用 vite-plugin-theme 方法替换样式变量</p>\n<h2 id=\"顶栏主题\"><a class=\"anchor\" href=\"#顶栏主题\">#</a> 顶栏主题</h2>\n<ul>\n<li>\n<p>自定义组件 ThemeColorPicker</p>\n</li>\n<li>\n<p>调用 updateHeaderBgColor 方法</p>\n<p>首先判断是否为夜间模式，夜间模式不生效；</p>\n<p>然后修改 css 变量 --header-bg-color</p>\n<p>修改悬浮颜色： const hoverColor = lighten (color!, 6); 修改 css 变量</p>\n<p>修改 headerSetting： 判断选择的颜色是否属于暗色，然后结合当前是否为暗色模式，判断设置是否生效</p>\n</li>\n</ul>\n<h2 id=\"菜单主题\"><a class=\"anchor\" href=\"#菜单主题\">#</a> 菜单主题</h2>\n<p>同顶栏主题</p>\n<h2 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h2>\n<blockquote>\n<p>vben 这个项目比较大，功能可以说是非常丰富，也可以说时非常冗杂，想要啃下来非常困难。 看到一个博客专门分析 vben 的可以参考：</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://fanlu.top/2023/05/15/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-01/",
            "url": "https://fanlu.top/2023/05/15/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-01/",
            "title": "鸡毛蒜皮周刊-01",
            "date_published": "2023-05-15T14:53:53.000Z",
            "content_html": "<h2 id=\"人类群星闪耀时\"><a class=\"anchor\" href=\"#人类群星闪耀时\">#</a> 人类群星闪耀时</h2>\n<p>作者茨威格选择了一些很有意思的历史时间进行文学叙述，文笔确实很好。 但是作为一个历史” 爱好者 “，始终无法相信这样过度的文学描写，这样总会导致历史失真。</p>\n<h2 id=\"家里的wifi\"><a class=\"anchor\" href=\"#家里的wifi\">#</a> 家里的 wifi</h2>\n<p>上海电信默认光猫是路由模式，又接了一个小米路由器，网速总是不稳定，这周找师傅来改成了桥接模式，需要电信远程下发数据还挺麻烦。 但是改完之后，室内的台式机（当时装修脑子抽，没给台式机留网口），网络还是一般，怀疑是主板网卡的问题，于是买了一个绿联的即插网卡，插上搞定！</p>\n<h2 id=\"chrome插件\"><a class=\"anchor\" href=\"#chrome插件\">#</a> chrome 插件</h2>\n<p>最近对 chrome 插件开发感兴趣。于是琢磨着写个小项目试试能做点啥。于是考虑做个统计网页浏览时间的小应用。简单来说，有两个步骤，</p>\n<ol>\n<li>获取到当前标签页的地址</li>\n<li>切换标签页时重新进行计时<br />\n网上的插件开发教程写的还行，但是对于 api 的教程太少了。于是找到了一个现成的插件项目叫做 “网费很贵”，对于我想要的功能它已经做的很完整了。于是扒了下它的源码【<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoZWVwemgvdGltZXIvYmxvYi9tYWluL1JFQURNRS16aC5tZCVFMyU4MCU5MSVFMyU4MCU4Mg==\">https://github.com/sheepzh/timer/blob/main/README-zh.md】。</span> 项目代码十分优雅，一看就能甩我好几年的功力。<br />\n找到了几个关键 api：<br />\n<pre class=\"line-numbers language-typescript\" data-language=\"typescript\"><code class=\"language-typescript\">chrome<span class=\"token punctuation\">.</span>tabs<span class=\"token punctuation\">.</span>onActivated<span class=\"token punctuation\">.</span>addListener  <span class=\"token comment\">// 添加切换 tab 的监听</span>\nchrome<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">.</span>setBadgeText  <span class=\"token comment\">// 修改插件图标上的文字</span>\nchrome<span class=\"token punctuation\">.</span>tabs<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>tabId<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 根据 tabID 获取到标签的信息</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre><br />\n 代码会放到 github 上。</li>\n</ol>\n<h2 id=\"docxtemplater\"><a class=\"anchor\" href=\"#docxtemplater\">#</a> docxtemplater</h2>\n<p>工作中用到了前端导出 word 的操作，chatGpt 给我推荐了这个库<br />\n！[[Pasted image 20230228121250.png]]<br />\n 使用方法可以参照：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDk0MTM5NDEzMjQ4MDgxOTI4\">前端使用 docxtemplater 导出 word 文档最佳实践 - 掘金 (juejin.cn)</span><br />\n 这个库的地址在：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW4teG1sLXRlbXBsYXRpbmcvZG9jeHRlbXBsYXRlcg==\">open-xml-templating/docxtemplater: Generate docx, pptx, and xlsx from templates (Word, Powerpoint and Excel documents), from Node.js, the Browser and the command line / Demo: https://www.docxtemplater.com/demo. #docx #office #generator #templating #report #json #generate #generation #template #create #pptx #docx #xlsx #react #vuejs #angularjs #browser #typescript #image #html #table #chart (github.com)</span><br />\n 使用下来，感觉很强大的一个库，支持模板渲染、循环数据渲染、表格循环渲染。</p>\n<h2 id=\"诡秘之主\"><a class=\"anchor\" href=\"#诡秘之主\">#</a> 诡秘之主</h2>\n<p>这是一个在各种排名都很高的网文，我看了几十章，实在看不下去了，节奏太慢了，看网文的目的是放松和休息大脑，实在不想费劲阅读。<br />\n但是打开起点，看到它在第一名，还是继续看下去吧。</p>\n<h2 id=\"ppchart\"><a class=\"anchor\" href=\"#ppchart\">#</a> PPChart</h2>\n<p>用 echarts 总觉得调样式很麻烦，这个网站不错，可以看到不少好看的效果，以后可以用来参考（拷贝）。😲<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3BwY2hhcnQuY29tLyMv\">PPChart - 让图表更简单</span><br />\n！[[Pasted image 20230301164049.png]]<br />\n 同类型的网站还有：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWFrZWFwaWUuY24vZWNoYXJ0c19jYXRlZ29yeS9zZXJpZXMtYmFy\">series-bar 柱状图 - makeapie echarts 图表可视化案例</span></p>\n<h2 id=\"nas赚钱\"><a class=\"anchor\" href=\"#nas赚钱\">#</a> nas 赚钱</h2>\n<p>在极空间 z4s 上打开了迅雷的网心云插件，用闲置的带宽做 pcdn 赚钱，目前几天下来，每天 5 毛钱。可惜没有公网 ip 不然应该会高一点，现在好像还不够 nas 的电费。</p>\n",
            "tags": []
        }
    ]
}