{
    "version": "https://jsonfeed.org/version/1",
    "title": "何妨吟啸且徐行",
    "description": "",
    "home_page_url": "https://fanlu.top",
    "items": [
        {
            "id": "https://fanlu.top/2023/06/05/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E6%96%B0%E6%90%AD%E5%BB%BA%E5%AE%9E%E5%BD%95/",
            "url": "https://fanlu.top/2023/06/05/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E6%96%B0%E6%90%AD%E5%BB%BA%E5%AE%9E%E5%BD%95/",
            "title": "云服务器重新搭建实录",
            "date_published": "2023-06-05T00:47:28.000Z",
            "content_html": "<blockquote>\n<p>上上周把腾讯云的环境搞坏了，之前搭建的 halo 博客站数据也丢了，好在基本都有备份，有些垃圾文章就直接扔掉了。  重新部署了一下云服务器，包括 rss 阅读、hexo 博客、gocron 定时任务等等。这篇文章记录一下我的部署流程。</p>\n</blockquote>\n<h2 id=\"安装docker\"><a class=\"markdownIt-Anchor\" href=\"#安装docker\">#</a> 安装 docker</h2>\n<p>略</p>\n<h2 id=\"安装docker-compose\"><a class=\"markdownIt-Anchor\" href=\"#安装docker-compose\">#</a> 安装 docker-compose</h2>\n<pre><code>sudo curl -L &quot;https://get.daocloud.io/docker/compose/releases/download/2.17.3/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\ndocker-compose --version\n\n</code></pre>\n<h2 id=\"部署rsshub\"><a class=\"markdownIt-Anchor\" href=\"#部署rsshub\">#</a> 部署 rsshub</h2>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnJzc2h1Yi5hcHAv\">https://docs.rsshub.app/</span></p>\n</blockquote>\n<pre><code>docker pull diygod/rsshub\ndocker run -d --name rsshub -p 1200:1200 diygod/rsshub\n</code></pre>\n<h2 id=\"部署mysql\"><a class=\"markdownIt-Anchor\" href=\"#部署mysql\">#</a> 部署 mysql</h2>\n<ul>\n<li>感谢 chatgpt 的指导</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> volume create mysql_data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">--name</span> mysql8 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3307</span>:3306 <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span>********</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_DATABASE</span><span class=\"token operator\">=</span>mydb <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_USER</span><span class=\"token operator\">=</span>myuser <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_PASSWORD</span><span class=\"token operator\">=</span>********</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token parameter variable\">-d</span> mysql:8.0 --default-authentication-plugin<span class=\"token operator\">=</span>mysql_native_password</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mysql <span class=\"token parameter variable\">-h</span> <span class=\"token number\">127.0</span>.0.1 <span class=\"token parameter variable\">-P</span> <span class=\"token number\">3307</span> <span class=\"token parameter variable\">-u</span> root <span class=\"token parameter variable\">-p</span></pre></td></tr></table></figure><h2 id=\"部署rssant\"><a class=\"markdownIt-Anchor\" href=\"#部署rssant\">#</a> 部署 rssant</h2>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FueWFudC9yc3NhbnQ=\">https://github.com/anyant/rssant</span></p>\n</blockquote>\n<ol>\n<li>准备配置文件～/rssant/rssant.env</li>\n</ol>\n<pre><code># 默认关闭DEBUG，请勿在开发测试之外开启DEBUG\nRSSANT_DEBUG=0\n\n# 请随机生成一个字符串\nRSSANT_SECRET_KEY=********\n\n# 应用的访问地址\nRSSANT_ROOT_URL=http://localhost:6789\n\n# 检查订阅的时间间隔，默认30分钟\nRSSANT_CHECK_FEED_MINUTES=30\n\n# 请前往GITHUB设置页面申请，不需要Github登录可留空\n# GitHub OAuth callback:\n# http://&lt;你的域名&gt;/api/v1/accounts/github/login/callback/\nRSSANT_GITHUB_CLIENT_ID=\nRSSANT_GITHUB_SECRET=\n\n# SMTP邮件功能，不需要注册功能可留空\nRSSANT_ADMIN_EMAIL=\nRSSANT_SMTP_ENABLE=false\nRSSANT_SMTP_HOST=smtp.qq.com\nRSSANT_SMTP_PORT=465\nRSSANT_SMTP_USE_SSL=true\nRSSANT_SMTP_USERNAME=\nRSSANT_SMTP_PASSWORD=\n\n# RSS代理功能，可留空\n# 参考项目 cloudflare_worker/rssant 目录下的说明部署代理\nRSSANT_RSS_PROXY_ENABLE=false\nRSSANT_RSS_PROXY_URL=\nRSSANT_RSS_PROXY_TOKEN=\n\n# 以下配置保持不动\nRSSANT_SCHEDULER_NETWORK=rssant\nRSSANT_PG_DB=rssant\nRSSANT_PG_HOST=localhost\nRSSANT_PG_USER=rssant\nRSSANT_PG_PASSWORD=rssant\n</code></pre>\n<ol start=\"2\">\n<li></li>\n</ol>\n<pre><code>#!/bin/bash\n\ndocker volume create rssant-data || true\ndocker volume create rssant-postgres-data || true\ndocker volume create rssant-postgres-logs || true\n\ndocker rm -f rssant || true\ndocker run -ti --name rssant -d \\\n    -p 8050:80 \\\n    --env-file ~/rssant/rssant.env \\\n    -v rssant-data:/app/data \\\n    -v rssant-postgres-data:/var/lib/postgresql/11/main \\\n    -v rssant-postgres-logs:/var/log/postgresql \\\n    --log-driver json-file --log-opt max-size=50m --log-opt max-file=10 \\\n    --restart unless-stopped \\\n    guyskk/rssant:latest\n\ndocker logs --tail 1000 -f rssant\n</code></pre>\n<h2 id=\"部署nginx\"><a class=\"markdownIt-Anchor\" href=\"#部署nginx\">#</a> 部署 nginx</h2>\n<ol>\n<li>安装 nginx</li>\n<li>配置 ssl 证书</li>\n<li>配置端口转发</li>\n</ol>\n<h2 id=\"部署hexo\"><a class=\"markdownIt-Anchor\" href=\"#部署hexo\">#</a> 部署 hexo</h2>\n<ol>\n<li>本地创建自己的 hexo 项目</li>\n<li>部署到 github</li>\n<li>在服务器上拉去项目并 hexo g</li>\n<li>将 nginx location 根目录设置到 hexo 生成目录下<br>\n生成页面为空文件</li>\n</ol>\n<h3 id=\"主题调整\"><a class=\"markdownIt-Anchor\" href=\"#主题调整\">#</a> 主题调整</h3>\n<p>使用这个主题 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==\">https://github.com/amehime/hexo-theme-shoka</span></p>\n<ul>\n<li>修改配置信息等等</li>\n<li>修改语言</li>\n<li>修改标题</li>\n<li>修改 loading</li>\n<li>修改图片函数</li>\n<li>修改图片列表</li>\n<li>添加备案信息</li>\n<li>…<br>\n 一开始配置出了问题，代码没有高亮，重新创建、配置就行了</li>\n</ul>\n<h2 id=\"部署文件服务器\"><a class=\"markdownIt-Anchor\" href=\"#部署文件服务器\">#</a> 部署文件服务器</h2>\n<p>选择 filebrowser <span class=\"exturl\" data-url=\"aHR0cHM6Ly9maWxlYnJvd3Nlci5vcmcvaW5zdGFsbGF0aW9u\">https://filebrowser.org/installation</span></p>\n<p>按照文档进行安装、启动、很方便，但是它不能作为图床使用，只是一个文件管理器。</p>\n<h2 id=\"图床\"><a class=\"markdownIt-Anchor\" href=\"#图床\">#</a> 图床</h2>\n<p>还需要部署图床吗？<br>\n本来想搭建图床、提供给博客使用，但是自己的服务器带宽和存储实在太有限，就使用了第三方的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbWdsb2MuY29tLw==\">图床</span><br>\n从<span class=\"exturl\" data-url=\"aHR0cHM6Ly93YWxsaGF2ZW4uY2Mv\"> wallhaven</span> 下载的图片太大了，就用<span class=\"exturl\" data-url=\"aHR0cHM6Ly90dXlhLnhpbnhpYW8udGVjaC8=\">图压</span>先压缩了一下，再上传到图床。</p>\n<h2 id=\"gocron定时任务\"><a class=\"markdownIt-Anchor\" href=\"#gocron定时任务\">#</a> gocron 定时任务</h2>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL291cWlhbmcvZ29jcm9u\">https://github.com/ouqiang/gocron</span><br>\n 先用 docker 安装服务<br>\n再启动一个本地节点</p>\n</blockquote>\n<h3 id=\"节点安装\"><a class=\"markdownIt-Anchor\" href=\"#节点安装\">#</a> 节点安装</h3>\n<p>gocron-node<br>\n 创建用户</p>\n<p>注意：有些后安装的命令，节点无法识别。需要重启一下节点。</p>\n<h3 id=\"自动部署blog\"><a class=\"markdownIt-Anchor\" href=\"#自动部署blog\">#</a> 自动部署 blog</h3>\n<ul>\n<li>github 添加 action</li>\n<li>服务器上部署 gocron 服务</li>\n<li>想办法实现 gocron 的 http 接口触发</li>\n<li>调用部署脚本</li>\n</ul>\n<p>gocron 的接口：</p>\n<ol>\n<li>登录<br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzExMC40Mi4xODIuOTI=\"> http://110.42.182.92</span>:<em>port</em>/api/user/login<br>\npost 请求<br>\n参数：username  password<br>\n 返回的数据：</li>\n</ol>\n<pre><code>&#123;\n\tcode:\n\tmessage:\n\tdata:&#123;\n\t\tis_admin: 1,\n\t\ttoken: &quot;&quot;\n\t\tuid:,\n\t\tusername:&quot;&quot;\n\t&#125;\n&#125;\n</code></pre>\n<ol>\n<li>运行任务<br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzExMC40Mi4xODIuOTI=\"> http://110.42.182.92</span>:<em>port</em>/api/task/run/1<br>\nget 请求<br>\n header 中携带 Auth-Token</li>\n</ol>\n<p>github 中 Action 可以带着 secret，可以先登录在调用任务运行部署脚本；<br>\n脚本需要调整，git 失败时需要不断重试；</p>\n<p>github 脚本：</p>\n<figure class=\"highlight yml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Deploy On My server</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  push<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    branches<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">-</span> main  <span class=\"token comment\"># 更改为你要触发的分支</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  login<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    runs<span class=\"token punctuation\">-</span><span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest  <span class=\"token comment\"># 可以根据需要更改操作系统</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    steps<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout code</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        uses<span class=\"token punctuation\">:</span> actions/checkout@v2</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Login and Fetch Token</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        run<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token comment\"># 在这里编写登录请求的代码，使用适当的语言和库发送 POST 请求，获取并提取出令牌</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token comment\"># 将令牌存储在一个变量中</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token comment\"># 示例（使用 cURL 发送请求）：</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          token=$(curl <span class=\"token punctuation\">-</span>X POST <span class=\"token punctuation\">-</span>d 'username= $&lt;<span class=\"token tag\">!--swig</span>￼0<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span><span class=\"token important\">&amp;password=</span> $&lt;<span class=\"token tag\">!--swig</span>￼1<span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span><span class=\"token punctuation\">></span>'  http<span class=\"token punctuation\">:</span>//110.42.182.92<span class=\"token punctuation\">:</span><span class=\"token important\">*port*/api/user/login</span> <span class=\"token punctuation\">|</span> jq <span class=\"token punctuation\">-</span>r '.data.token')</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          echo \"Token<span class=\"token punctuation\">:</span> $token\"</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token comment\"># 将令牌存储为一个 GitHub Actions 的环境变量，以便在后续的步骤中使用</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          echo \"TOKEN=$token\" <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span> $GITHUB_ENV</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Start Deploy Task</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        run<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token comment\"># 在这里编写发送下一个请求的代码，使用适当的语言和库</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token comment\"># 将上一步获取的令牌放置在请求标头中</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token comment\"># 示例（使用 cURL 发送请求）：</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          token=$TOKEN  <span class=\"token comment\"># 获取上一步中存储的令牌</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          curl <span class=\"token punctuation\">-</span><span class=\"token key atrule\">H \"Auth-Token</span><span class=\"token punctuation\">:</span> $token\"  http<span class=\"token punctuation\">:</span>//110.42.182.92<span class=\"token punctuation\">:</span><span class=\"token important\">*port*/api/task/run/1</span></pre></td></tr></table></figure><p>命令脚本：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ~/code/Blog</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> HEAD</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">max_retries</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">retry_count</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">success</span><span class=\"token operator\">=</span>false</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$retry_count</span> <span class=\"token parameter variable\">-lt</span> <span class=\"token variable\">$max_retries</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$success</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Attempting to pull Git code (Attempt: <span class=\"token variable\"><span class=\"token variable\">$((</span>retry_count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token variable\">))</span></span>)\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">git</span> pull</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token assign-left variable\">success</span><span class=\"token operator\">=</span>true</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Git pull successful\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token assign-left variable\">retry_count</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>retry_count<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token variable\">))</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Git pull failed. Retrying...\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$success</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Git pull failed after <span class=\"token variable\">$max_retries</span> attempts\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>hexo g</pre></td></tr></table></figure>",
            "tags": [
                "云服务器"
            ]
        },
        {
            "id": "https://fanlu.top/2023/06/03/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-03/",
            "url": "https://fanlu.top/2023/06/03/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-03/",
            "title": "鸡毛蒜皮周刊-03",
            "date_published": "2023-06-03T07:18:12.000Z",
            "content_html": "<h2 id=\"ue4的网络模块\"><a class=\"markdownIt-Anchor\" href=\"#ue4的网络模块\">#</a> ue4 的网络模块</h2>\n<p>ue4 的网络和客户端紧密结合，通过蓝图中的设置就能实现服务器的功能。这篇文章介绍了 ue4 网络模块的原理。<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemh5aW5na3VuLmNvbS9tYXJrZG93bi91ZTRuZXR3b3JrLw==\">UE4 网络模块剖析</span></p>\n<h2 id=\"tcp\"><a class=\"markdownIt-Anchor\" href=\"#tcp\">#</a> TCP</h2>\n<p>工作中发现一个棘手的问题，TCP 莫名其妙的断开。目前还没有定位到，可能是阿里云的 DNS 负载均衡搞得鬼。<br>\n发现对于 TCP 的了解太匮乏了，于是买了几本书，另外要好好学下 tcpdump 和 wireshark</p>\n<h2 id=\"wasm\"><a class=\"markdownIt-Anchor\" href=\"#wasm\">#</a> WASM</h2>\n<p>了解了一下 WASM 是干嘛的：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82ODA0ODUyNA==\">https://zhuanlan.zhihu.com/p/68048524</span></p>\n<h2 id=\"clickhouse\"><a class=\"markdownIt-Anchor\" href=\"#clickhouse\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbGlja2hvdXNlLmNvbS9kb2NzL3poLw==\">ClickHouse</span></h2>\n<p>ClickHouse 是一个用于联机分析 (OLAP) 的列式数据库管理系统 (DBMS)。<br>\n一般用作用户埋点数据存储和分析。</p>\n<h2 id=\"表格设计\"><a class=\"markdownIt-Anchor\" href=\"#表格设计\">#</a> 表格设计</h2>\n<p>前端需要展示表格时，总是不知道该如何区分主次、强调信息、美化表格、减少冗余信息。这篇文章详细写了前端表格设计的方方面面，非常实用。<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaHRtbHRyaXAuY29tLzE4NTIuaHRtbA==\">如何设计好的 web 表格？分享大神的总结 - 前端印记 (htmltrip.com)</span></p>\n",
            "tags": [
                "鸡毛蒜皮周刊"
            ]
        },
        {
            "id": "https://fanlu.top/2023/05/19/%E5%9B%BE%E7%89%87%E6%89%B9%E9%87%8F%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/",
            "url": "https://fanlu.top/2023/05/19/%E5%9B%BE%E7%89%87%E6%89%B9%E9%87%8F%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/",
            "title": "图片批量压缩工具推荐",
            "date_published": "2023-05-19T15:24:15.000Z",
            "content_html": "<p>一个图片批量压缩工具，使用非常方便。<br>\n把文件夹中图片全部拖进去，然后很快就压缩好并再次保存到文件夹中。</p>\n<ul>\n<li>支持指定宽高</li>\n<li>支持指定压缩强度或者文件大小</li>\n<li>可选目标格式</li>\n<li>可选保存路径</li>\n<li>可选新文件后缀。</li>\n<li>没广告！！！！！！</li>\n<li>免费！！！！！！！</li>\n</ul>\n<p>官网在这里⬇</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90dXlhLnhpbnhpYW8udGVjaC8jb3Blbi1zb3VyY2U=\">图压官网</span></p>\n",
            "tags": [
                "工具"
            ]
        },
        {
            "id": "https://fanlu.top/2023/05/18/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-02/",
            "url": "https://fanlu.top/2023/05/18/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-02/",
            "title": "鸡毛蒜皮周刊-02",
            "date_published": "2023-05-18T15:20:45.000Z",
            "content_html": "<h2 id=\"nonebot-和-微信机器人\"><a class=\"markdownIt-Anchor\" href=\"#nonebot-和-微信机器人\">#</a> NoneBot 和 微信机器人</h2>\n<p>NoneBot（<strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly92Mi5ub25lYm90LmRldi8=\">NoneBot</span></strong>）是一个 python 框架，用来实现机器人聊天应答，支持的平台包括：qq、飞书、钉钉等，插件非常丰富，文档也很详尽，准备搭建试试。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly94aWUuaW5mb3EuY24vYXJ0aWNsZS8yMGYxOTE0NjIzN2YzNzE0YzVlYjVhZGI3\">微信 + ChatGPT = 自己的智能助手 | 社区征文_ChatGPT_IT 蜗壳 - Tango_InfoQ 写作社区</span> 作者基于 wechaty python 库和一个 chatGpt 账号，实现了一个微信的智能应答机器人</p>\n<h2 id=\"pake\"><a class=\"markdownIt-Anchor\" href=\"#pake\">#</a> Pake</h2>\n<p>基于 rust 和 tauri 来将网站打包成一个应用，支持多平台。<br>\n我拿来试了下，打包了部署在个人腾讯云上面的 rss 阅读器，体验非常好，阅读 rss 的时间大大增加了。<br>\n<img data-src=\"http://110.42.182.92:4080/Pasted%20image%2020230307081744.png\" alt=\"图片\"><br>\n顺便吐槽一句，win 上现有的 rss 阅读器真的很难用。</p>\n<h2 id=\"ue4\"><a class=\"markdownIt-Anchor\" href=\"#ue4\">#</a> UE4</h2>\n<p>由于工作的原因，需要了解一下 UE4 的开发。试了一下 B 站上的一个教程：</p>\n<iframe src=\"//player.bilibili.com/player.html?aid=728399911&bvid=BV1qS4y1J7oh&cid=772526176&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n体验如下：\n- 蓝图太好用了，可视化编程无敌\n- 蓝图太难记了，控件、方法实在太多了，有些是需要牵引出来才能找到，太难找了\n- ue4的网络模块太牛了，在蓝图里就能开发网络，需要好好学习一下\n<h2 id=\"rust和chatgpt\"><a class=\"markdownIt-Anchor\" href=\"#rust和chatgpt\">#</a> rust 和 chatGPT</h2>\n<p>尝试看了一个 rust 后端，tauri 前端的小项目。<br>\nrust 语法有点难理解啊。<br>\n忽然想起 chatGPT，于是放进去问问，效果惊人<br>\n<img data-src=\"http://110.42.182.92:4080/Pasted%20image%2020230309091056.png\" alt=\"\"></p>\n<h2 id=\"travellingscn\"><a class=\"markdownIt-Anchor\" href=\"#travellingscn\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL1RyYXZlbGxpbmdzLmNu\">Travellings.cn</span></h2>\n<p>偶然发现某个博客有个友链的跳转地址，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS10cmF2ZWxsaW5ncy1rdTZyaThndXU1M2F4cWxiLmNu\">首先跳到 travellings.cn</span>，然后跳到另一个博客，然后下一个博客也有这么一个链接，感觉是一个博客联盟之类的，进行随机跳转。一查果然没错：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHJhdmVsbGluZ3MuY24v\">开往 - 友链接力 (travellings.cn)</span><br>\n 挺有意思的，可以把自己的博客也搞上去<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHJhdmVsbGluZ3MuY24vZ28uaHRtbA==\">开往 - 友链接力 (travellings.cn)</span>  这个链接可以随机前往到某个博客，进入他们的世界，感觉很不错。</p>\n",
            "tags": [
                "鸡毛蒜皮周刊"
            ]
        },
        {
            "id": "https://fanlu.top/2023/05/17/gopher-lua%E4%BD%BF%E7%94%A8%E5%B0%8Fdemo/",
            "url": "https://fanlu.top/2023/05/17/gopher-lua%E4%BD%BF%E7%94%A8%E5%B0%8Fdemo/",
            "title": "gopher-lua使用小demo",
            "date_published": "2023-05-17T01:04:08.000Z",
            "content_html": "<blockquote>\n<p>模拟读者读书</p>\n</blockquote>\n<h2 id=\"首先新建reader类\"><a class=\"markdownIt-Anchor\" href=\"#首先新建reader类\">#</a> 首先新建 reader 类</h2>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">type</span> Reader <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tUid         <span class=\"token builtin\">uint32</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tUserName    <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tReaderCount <span class=\"token builtin\">uint8</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token punctuation\">(</span>reader <span class=\"token operator\">*</span>Reader<span class=\"token punctuation\">)</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>book <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\treader<span class=\"token punctuation\">.</span>ReaderCount<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reader:%v,Name:%v,read book %v\\n\"</span><span class=\"token punctuation\">,</span> reader<span class=\"token punctuation\">.</span>Uid<span class=\"token punctuation\">,</span> reader<span class=\"token punctuation\">.</span>UserName<span class=\"token punctuation\">,</span> book<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"将reader类注册到lua中\"><a class=\"markdownIt-Anchor\" href=\"#将reader类注册到lua中\">#</a> 将 reader 类注册到 lua 中</h2>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> lua <span class=\"token string\">\"github.com/yuin/gopher-lua\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> luaPersonTypeName <span class=\"token operator\">=</span> <span class=\"token string\">\"reader\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> readerMethods <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>lua<span class=\"token punctuation\">.</span>LGFunction<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token string\">\"read\"</span><span class=\"token punctuation\">:</span>     luaReaderRead<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token string\">\"username\"</span><span class=\"token punctuation\">:</span> readerGetSetUsername<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 注册定义的类成为 lua 的一个元表</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">registerReaderType</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tmt <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTypeMetatable</span><span class=\"token punctuation\">(</span>luaPersonTypeName<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reader\"</span><span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"new\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunction</span><span class=\"token punctuation\">(</span>luaNewReader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__index\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">SetFuncs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> readerMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//lua 创建对象方法</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">luaNewReader</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\treader <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Reader<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tL<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token function\">uint8</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tud <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewUserData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tud<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> reader</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetMetatable</span><span class=\"token punctuation\">(</span>ud<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypeMetatable</span><span class=\"token punctuation\">(</span>luaPersonTypeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\tL<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>ud<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 在 lua 中获取对象的重要一步</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">checkReader</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Reader <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tud <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckUserData</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token keyword\">if</span> v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> ud<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Reader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> v</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\tL<span class=\"token punctuation\">.</span><span class=\"token function\">ArgError</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"reader expected\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">// 方法注册到 lua 中</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">luaReaderRead</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\tr <span class=\"token operator\">:=</span> <span class=\"token function\">checkReader</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tbook <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tr<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// 属性的 get Set 方法， 注意方法名必须这样写：结构名 GetSet 属性名，大小写也要注意</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">readerGetSetUsername</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tr <span class=\"token operator\">:=</span> <span class=\"token function\">checkReader</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token keyword\">if</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">GetTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tr<span class=\"token punctuation\">.</span>UserName <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\tL<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>UserName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"也许有一些模块需要注入到lua中\"><a class=\"markdownIt-Anchor\" href=\"#也许有一些模块需要注入到lua中\">#</a> 也许有一些模块需要注入到 lua 中</h2>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tlua <span class=\"token string\">\"github.com/yuin/gopher-lua\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> modFuncs <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>lua<span class=\"token punctuation\">.</span>LGFunction<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token string\">\"eat\"</span><span class=\"token punctuation\">:</span>    Eat<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token string\">\"drink\"</span><span class=\"token punctuation\">:</span>  Drink<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token string\">\"record\"</span><span class=\"token punctuation\">:</span> Record<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">Eat</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tmsg <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"eat:\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">Drink</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tmsg <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"drink:\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">Record</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tr <span class=\"token operator\">:=</span> <span class=\"token function\">checkReader</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%v读完了！一共%v本书！\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>UserName<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>ReaderCount<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">Loader</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tmod <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">SetFuncs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> modFuncs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"mymod\"</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tL<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"预先定义一个lua文件\"><a class=\"markdownIt-Anchor\" href=\"#预先定义一个lua文件\">#</a> 预先定义一个 lua 文件</h2>\n<p>这样所有的协程可以共享这个 lua 文件</p>\n<figure class=\"highlight lua\"><figcaption data-lang=\"lua\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">local</span> mymod <span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mymod\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- 加载注入的模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    global_id <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    global_name <span class=\"token operator\">=</span> <span class=\"token string\">\"test\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">newReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    r <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>global_id<span class=\"token punctuation\">,</span>global_name<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 连续执行三次</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    r<span class=\"token punctuation\">:</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    mymod<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"面包\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    mymod<span class=\"token punctuation\">.</span><span class=\"token function\">drink</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"雪碧\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    mymod<span class=\"token punctuation\">.</span><span class=\"token function\">record</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">end</span></pre></td></tr></table></figure><h2 id=\"然后可以试试看啦\"><a class=\"markdownIt-Anchor\" href=\"#然后可以试试看啦\">#</a> 然后可以试试看啦</h2>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"bufio\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"github.com/yuin/gopher-lua\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token string\">\"github.com/yuin/gopher-lua/parse\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token string\">\"math/rand\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token string\">\"os\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token string\">\"strconv\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token string\">\"sync\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token string\">\"time\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// TODO: 加载 lua 代码执行</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// TODO: 多线程</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">var</span> wg sync<span class=\"token punctuation\">.</span>WaitGroup</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tbooks <span class=\"token operator\">:=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token string\">\"活着\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"白鹿原\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"春秋战国\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"兄弟\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"许三观卖血记\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"丰乳肥臀\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tluaPath <span class=\"token operator\">:=</span> <span class=\"token string\">\"./main/test.lua\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tluaProto<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> <span class=\"token function\">compileFile</span><span class=\"token punctuation\">(</span>luaPath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token keyword\">go</span> <span class=\"token function\">DoRead</span><span class=\"token punctuation\">(</span>luaProto<span class=\"token punctuation\">,</span> <span class=\"token function\">uint32</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Reader\"</span><span class=\"token operator\">+</span>strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> books<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 机器人主流程</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">DoRead</span><span class=\"token punctuation\">(</span>luaProto <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>FunctionProto<span class=\"token punctuation\">,</span> id <span class=\"token builtin\">uint32</span><span class=\"token punctuation\">,</span> name <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> books <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tL <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token keyword\">defer</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token function\">registerReaderType</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tL<span class=\"token punctuation\">.</span><span class=\"token function\">PreloadModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mymod\"</span><span class=\"token punctuation\">,</span> Loader<span class=\"token punctuation\">)</span>          <span class=\"token comment\">// 注入自己的模块</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tlFunc <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunctionFromProto</span><span class=\"token punctuation\">(</span>luaProto<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 从字节码解析得到</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tL<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>lFunc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\tL<span class=\"token punctuation\">.</span><span class=\"token function\">PCall</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>MultRet<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t<span class=\"token comment\">// init</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\tFn<span class=\"token punctuation\">:</span>      L<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\tNRet<span class=\"token punctuation\">:</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\tProtect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>LNil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token comment\">// 新建机器人</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"global_id\"</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LNumber</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\tL<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"global_name\"</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\tFn<span class=\"token punctuation\">:</span>      L<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"newReader\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\tNRet<span class=\"token punctuation\">:</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\tProtect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>LNil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t<span class=\"token comment\">// 读书</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\tbook <span class=\"token operator\">:=</span> books<span class=\"token punctuation\">[</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token function\">len</span><span class=\"token punctuation\">(</span>books<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t\tFn<span class=\"token punctuation\">:</span>      L<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"read\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t\t\tNRet<span class=\"token punctuation\">:</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t\t\tProtect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t\ttime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t<span class=\"token comment\">// 结束</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t\tFn<span class=\"token punctuation\">:</span>      L<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"finish\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\tNRet<span class=\"token punctuation\">:</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\tProtect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>LNil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\twg<span class=\"token punctuation\">.</span><span class=\"token function\">Done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token comment\">// 解析文件变成 lua 字节码</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">compileFile</span><span class=\"token punctuation\">(</span>filePath <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>FunctionProto<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\tfile<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>\t<span class=\"token keyword\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err</pre></td></tr><tr><td data-num=\"102\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>\treader <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\tchunk<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> parse<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err</pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\tproto<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">Compile</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>\t<span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>\t<span class=\"token keyword\">return</span> proto<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "golang实验室"
            ]
        },
        {
            "id": "https://fanlu.top/2023/05/17/gopher-lua%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "https://fanlu.top/2023/05/17/gopher-lua%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "gopher-lua的使用",
            "date_published": "2023-05-17T01:03:13.000Z",
            "content_html": "<p>#golang #lua #压测</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3l1aW4vZ29waGVyLWx1YSN1c2FnZQ==\">https://github.com/yuin/gopher-lua#usage</span></p>\n</blockquote>\n<h2 id=\"简单使用\"><a class=\"markdownIt-Anchor\" href=\"#简单使用\">#</a> 简单使用</h2>\n<ol>\n<li>首先声明一个 lua 虚拟机： L := lua.NewState ()  返回一个 LState Struct</li>\n<li>然后可以执行 lua 格式的字符串或者 File\n<ul>\n<li>lua.DoString( <code>print(&quot;hello&quot;)</code> )</li>\n<li>lua.DoFile (lua 脚本的路径)</li>\n</ul>\n</li>\n</ol>\n<p>LState 定义如下：</p>\n<pre><code class=\"language-golang\">type LState struct &#123;\n\tG       *Global\n\tParent  *LState\n\tEnv     *LTable\n\tPanic   func(*LState)\n\tDead    bool\n\tOptions Options\n\n\tstop         int32\n\treg          *registry\n\tstack        callFrameStack\n\talloc        *allocator\n\tcurrentFrame *callFrame\n\twrapped      bool\n\tuvcache      *Upvalue\n\thasErrorFunc bool\n\tmainLoop     func(*LState, *callFrame)\n\tctx          context.Context\n&#125;\n</code></pre>\n<ul>\n<li>Get 方法  获取栈中的变量</li>\n<li></li>\n</ul>\n<h2 id=\"数据模型\"><a class=\"markdownIt-Anchor\" href=\"#数据模型\">#</a> 数据模型</h2>\n<p>gopher-lua 中的说有变量值都是一个 LValue, 是 go 语言中的 interface，包含两个方法：</p>\n<ul>\n<li>String（）string</li>\n<li>Type() LValueType</li>\n</ul>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> LValue <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token builtin\">string</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> LValueType   </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token function\">assertFloat64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">float64</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token function\">assertString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token function\">assertFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>LFunction<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>该接口的实现包括如下类：</p>\n<table>\n<thead>\n<tr>\n<th>Type name</th>\n<th>Go type</th>\n<th>Type() value</th>\n<th>Constants</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>LNilType</code></td>\n<td>(constants)</td>\n<td><code>LTNil</code></td>\n<td><code>LNil</code></td>\n</tr>\n<tr>\n<td><code>LBool</code></td>\n<td>(constants)</td>\n<td><code>LTBool</code></td>\n<td><code>LTrue</code> ,  <code>LFalse</code></td>\n</tr>\n<tr>\n<td><code>LNumber</code></td>\n<td>float64</td>\n<td><code>LTNumber</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LString</code></td>\n<td>string</td>\n<td><code>LTString</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LFunction</code></td>\n<td>struct pointer</td>\n<td><code>LTFunction</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LUserData</code></td>\n<td>struct pointer</td>\n<td><code>LTUserData</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LState</code></td>\n<td>struct pointer</td>\n<td><code>LTThread</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LTable</code></td>\n<td>struct pointer</td>\n<td><code>LTTable</code></td>\n<td><code>-</code></td>\n</tr>\n<tr>\n<td><code>LChannel</code></td>\n<td>chan LValue</td>\n<td><code>LTChannel</code></td>\n<td><code>-</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>lv.Type () 可以获取类型</li>\n<li>原表不可用；没有错误捕捉</li>\n</ul>\n<h2 id=\"callstack-registry-size\"><a class=\"markdownIt-Anchor\" href=\"#callstack-registry-size\">#</a> Callstack &amp; Registry size</h2>\n<p>LState 的调用栈的大小控制着脚本中 Lua 函数的最大调用深度（Go 函数的调用不算在内）。</p>\n<p>LState 的注册表实现了对调用函数（包括 Lua 和 Go 函数）和表达式中的临时变量的栈存储。它的存储需求将随着调用堆栈的使用和代码的复杂性而增加。</p>\n<p>注册表和调用堆栈都可以被设置为固定大小或自动大小。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>L <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    RegistrySize<span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\">// this is the initial size of the registry</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    RegistryMaxSize<span class=\"token punctuation\">:</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span>      <span class=\"token comment\">// this is the maximum size that the registry can grow to. If set to `0` (the default) then the registry will not auto grow</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    RegistryGrowStep<span class=\"token punctuation\">:</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// this is how much to step up the registry by each time it runs out of space. The default is `32`.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">defer</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"api\"><a class=\"markdownIt-Anchor\" href=\"#api\">#</a> API</h2>\n<h3 id=\"从lua中调用go函数\"><a class=\"markdownIt-Anchor\" href=\"#从lua中调用go函数\">#</a> 从 lua 中调用 go 函数</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">Double</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    lv <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>             <span class=\"token comment\">/* get argument */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    L<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span><span class=\"token function\">LNumber</span><span class=\"token punctuation\">(</span>lv <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* push result */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>                     <span class=\"token comment\">/* number of results */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    L <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">defer</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"double\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunction</span><span class=\"token punctuation\">(</span>Double<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">/* Original lua_setglobal uses stack... */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   \t<span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">DoString</span><span class=\"token punctuation\">(</span><span class=\"token string\">`print(double(20))`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注册为 lua 函数之后，会变成一个 LGFunction 类型；</p>\n<p>支持协程中运行；</p>\n<h3 id=\"加载lua内置库的函数\"><a class=\"markdownIt-Anchor\" href=\"#加载lua内置库的函数\">#</a> 加载 lua 内置库的函数</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    L <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>Options<span class=\"token punctuation\">&#123;</span>SkipOpenLibs<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">defer</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> pair <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        n <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        f lua<span class=\"token punctuation\">.</span>LGFunction</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>lua<span class=\"token punctuation\">.</span>LoadLibName<span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>OpenPackage<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Must be first</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>lua<span class=\"token punctuation\">.</span>BaseLibName<span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>OpenBase<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>lua<span class=\"token punctuation\">.</span>TabLibName<span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>OpenTable<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            Fn<span class=\"token punctuation\">:</span>      L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunction</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            NRet<span class=\"token punctuation\">:</span>    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            Protect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">DoFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main.lua\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"在go中创建一个lua的模块\"><a class=\"markdownIt-Anchor\" href=\"#在go中创建一个lua的模块\">#</a> 在 go 中创建一个 lua 的模块</h3>\n<ol>\n<li>\n<p>首先定义一组方法  类型为 map [string] lua.LGFuntion</p>\n</li>\n<li>\n<p>然后调用 SetFuncs  将函数表分配给一个 lua table，作为一个模块，获取到一个 LTable</p>\n</li>\n<li>\n<p>然后将模块 push 到栈</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">Loader</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// register functions to the table</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    mod <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">SetFuncs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> exports<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// register other stuff</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// returns the module</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    L<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>mod<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>通过 PreLoadModule（name,  注册方法）将模块注册到虚拟机中</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>L<span class=\"token punctuation\">.</span><span class=\"token function\">PreloadModule</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mymodule\"</span><span class=\"token punctuation\">,</span> mymodule<span class=\"token punctuation\">.</span>Loader<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"在go中调用lua方法\"><a class=\"markdownIt-Anchor\" href=\"#在go中调用lua方法\">#</a> 在 go 中调用 lua 方法</h3>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CallByParam</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span>P<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Fn<span class=\"token punctuation\">:</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">GetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"double\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">//lua 方法名</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    NRet<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\t\t\t\t\t<span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Protect<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">LNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>CallByParam 方法 第一个参数 lua.P 结构； 第二个参数 参数</li>\n<li>通过 lua.P 结构进行调用</li>\n<li>实际使用中 函数参数也可以使用提前设置全局变量的方式来实现</li>\n</ul>\n<h3 id=\"自定义类型\"><a class=\"markdownIt-Anchor\" href=\"#自定义类型\">#</a> 自定义类型</h3>\n<p>支持在 Go 中自定义新类型</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> Person <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Name <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> luaPersonTypeName <span class=\"token operator\">=</span> <span class=\"token string\">\"person\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 注册类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">registerPersonType</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    mt <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTypeMetatable</span><span class=\"token punctuation\">(</span>luaPersonTypeName<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 新建一个元表</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person\"</span><span class=\"token punctuation\">,</span> mt<span class=\"token punctuation\">)</span>\t\t\t\t\t<span class=\"token comment\">// 元表设置为全局变量</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// static attributes</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"new\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunction</span><span class=\"token punctuation\">(</span>newPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 注册方法到元表中 静态放啊</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// methods</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetField</span><span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">,</span> <span class=\"token string\">\"__index\"</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">SetFuncs</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">NewTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> personMethods<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 注册方法到元表</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// Constructor</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">newPerson</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\t\t\t<span class=\"token comment\">//go 方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    person <span class=\"token operator\">:=</span> <span class=\"token operator\">&amp;</span>Person<span class=\"token punctuation\">&#123;</span>L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    ud <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewUserData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    ud<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> person</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    L<span class=\"token punctuation\">.</span><span class=\"token function\">SetMetatable</span><span class=\"token punctuation\">(</span>ud<span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypeMetatable</span><span class=\"token punctuation\">(</span>luaPersonTypeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    L<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>ud<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// Checks whether the first lua argument is a *LUserData with *Person and returns this *Person.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">checkPerson</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>Person <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 检查类型</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    ud <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckUserData</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> v<span class=\"token punctuation\">,</span> ok <span class=\"token operator\">:=</span> ud<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> ok <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> v</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    L<span class=\"token punctuation\">.</span><span class=\"token function\">ArgError</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"person expected\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">var</span> personMethods <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span>lua<span class=\"token punctuation\">.</span>LGFunction<span class=\"token punctuation\">&#123;</span>\t\t<span class=\"token comment\">// 方法表</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> personGetSetName<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// Getter and setter for the Person#Name</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">personGetSetName</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">)</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">&#123;</span>\t\t\t<span class=\"token comment\">// 属性的 Getter 和 Setter 在 lua 中通过 p:name () 调用</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    p <span class=\"token operator\">:=</span> <span class=\"token function\">checkPerson</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">GetTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        p<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">CheckString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    L<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>lua<span class=\"token punctuation\">.</span><span class=\"token function\">LString</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    L <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">NewState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">defer</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token function\">registerPersonType</span><span class=\"token punctuation\">(</span>L<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">DoString</span><span class=\"token punctuation\">(</span><span class=\"token string\">`\t\t\t\t\t\t</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        p = person.new(\"Steeve\")\t</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        print(p:name(\"新名字\")) --  </pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\tprint(p:name())</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        p:name(\"Alice\")</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        print(p:name()) -- \"Alice\"</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    `</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"共享lua字节代码\"><a class=\"markdownIt-Anchor\" href=\"#共享lua字节代码\">#</a> 共享 lua 字节代码</h3>\n<p>调用 DoFile 将加载一个 Lua 脚本，将其编译为字节码，并在一个 LState 中运行字节码。</p>\n<p>如果你有多个 LState，它们都需要运行同一个脚本，你可以在它们之间共享字节码，这将节省内存。共享字节码是安全的，因为它是只读的，不能被 lua 脚本所改变。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// CompileLua reads the passed lua file from disk and compiles it.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">CompileLua</span><span class=\"token punctuation\">(</span>filePath <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>FunctionProto<span class=\"token punctuation\">,</span> <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    file<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">defer</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    reader <span class=\"token operator\">:=</span> bufio<span class=\"token punctuation\">.</span><span class=\"token function\">NewReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    chunk<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> parse<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    proto<span class=\"token punctuation\">,</span> err <span class=\"token operator\">:=</span> lua<span class=\"token punctuation\">.</span><span class=\"token function\">Compile</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">,</span> filePath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">,</span> err</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> proto<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// DoCompiledFile takes a FunctionProto, as returned by CompileLua, and runs it in the LState. It is equivalent</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// to calling DoFile on the LState with the original source file.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">DoCompiledFile</span><span class=\"token punctuation\">(</span>L <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>LState<span class=\"token punctuation\">,</span> proto <span class=\"token operator\">*</span>lua<span class=\"token punctuation\">.</span>FunctionProto<span class=\"token punctuation\">)</span> <span class=\"token builtin\">error</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    lfunc <span class=\"token operator\">:=</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">NewFunctionFromProto</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    L<span class=\"token punctuation\">.</span><span class=\"token function\">Push</span><span class=\"token punctuation\">(</span>lfunc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> L<span class=\"token punctuation\">.</span><span class=\"token function\">PCall</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> lua<span class=\"token punctuation\">.</span>MultRet<span class=\"token punctuation\">,</span> <span class=\"token boolean\">nil</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"go协程\"><a class=\"markdownIt-Anchor\" href=\"#go协程\">#</a> go 协程</h3>\n<p>LState 不是 goroutine-safe。建议每个 goroutine 使用一个 LState，并通过使用通道在 goroutine 之间通信。</p>\n<p>通道在 GopherLua 中由通道对象表示。而一个通道表提供了执行通道操作的函数。</p>\n<p>有些对象不能通过通道发送，因为它本身有非 goroutine 安全的对象。</p>\n<p>一个线程 (state)<br>\n 一个函数<br>\n一个用户数据<br>\n一个有元数据的表</p>\n",
            "tags": [
                "golang实验室"
            ]
        },
        {
            "id": "https://fanlu.top/2023/05/16/vben-admin%E6%8D%A2%E8%82%A4%E5%AE%9E%E7%8E%B0/",
            "url": "https://fanlu.top/2023/05/16/vben-admin%E6%8D%A2%E8%82%A4%E5%AE%9E%E7%8E%B0/",
            "title": "vben-admin换肤实现",
            "date_published": "2023-05-16T00:19:08.000Z",
            "content_html": "<p>最近在 github 上看到了一个后台管理的前端项目，使用了 vue3+ts+vite+ant-vue 的技术，看起来很不错，功能特别丰富，clone 下来发现代码也写的特别好，比我现在的小白代码根本不在同一个等级，因此想要学习一下。 个人觉得从一个功能抽丝剥茧来学习一个功能的写法可能会对自己的技术提高有帮助。</p>\n<p>项目中的侧边栏提供了超多的主题选项，可以丰富的变换主题。因此本文想分析一下这个换肤是如何实现的。</p>\n<p><img data-src=\"https://secure2.wostatic.cn/static/wGUf6UvBJUZVXfAPhrzaF/image.png?auth_key=1684196309-2jkBMzvREcZ21xSJjxnEvU-0-4173f6dd779469091bae7835b4c93aa7\" alt=\"\"></p>\n<h2 id=\"黑色亮色主题切换\"><a class=\"markdownIt-Anchor\" href=\"#黑色亮色主题切换\">#</a> 黑色 / 亮色主题切换</h2>\n<p>主题切换组件 AppDarkModeToggle.vue</p>\n<ul>\n<li>定义点击事件 toggleDarkMode\n<ol>\n<li>\n<p>调用设置黑色主题函数 setDarkMode</p>\n<p>修改 pinia 状态中的 dark 模式，并将变量存储到 localStorage 中</p>\n</li>\n<li>\n<p>调用 updateDarkTheme</p>\n<ul>\n<li>获取 htmlRoot dom 节点，即本项目应用的根节点</li>\n<li>判断根节点是否包含 dark class 定义</li>\n<li>如果是 dark\n<ul>\n<li>判断是否为生产模式，并加载 dark 主题 css（由 vite-plugin-theme 支持）</li>\n<li>将根节点的 data-teme 设置为 dark</li>\n<li>并添加 class 为 dark</li>\n</ul>\n</li>\n<li>如果不是 dark\n<ul>\n<li>将根节点 data-theme 设置为 light</li>\n<li>并且移除 dark class</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<pre><code class=\"language-Python\">这里修改data-theme为dark，利用了less中条件判断语句\n例如：\n\n  html[data-theme='dark'] &#123;\n    .@&#123;prefix-cls&#125; &#123;\n      border: 1px solid rgb(196 188 188);\n    &#125;\n  &#125;\n\nps：less还支持动态变量名，6666\n</code></pre>\n<pre><code>3. 调用updateHeaderBgColor修改header的背景色\n    - 判断是否为dark模式，获取到颜色，如果不是暗色，那就获取当前设置的颜色\n</code></pre>\n<p>color = appStore.getHeaderSetting.bgColor;<br>\n- 将获取到的颜色设置 css 变量  setCssVar</p>\n<pre><code class=\"language-JavaScript\">export function setCssVar(prop: string, val: any, dom = docEle) &#123;\n  console.log(prop,val)\n  dom.style.setProperty(prop, val);\n&#125;\n</code></pre>\n<pre><code>    - 计算得到hover颜色（亮度提高6），同样设置css变量\n\n        这里用到了自定义的颜色函数，我觉得很有用\n</code></pre>\n<pre><code class=\"language-TypeScript\">/**\n * 判断是否 十六进制颜色值.\n * 输入形式可为 #fff000 #f00\n *\n * @param   String  color   十六进制颜色值\n * @return  Boolean\n */\nexport function isHexColor(color: string) &#123;\n  const reg = /^#([0-9a-fA-F]&#123;3&#125;|[0-9a-fA-f]&#123;6&#125;)$/;\n  return reg.test(color);\n&#125;\n\n/**\n * RGB 颜色值转换为 十六进制颜色值.\n * r, g, 和 b 需要在 [0, 255] 范围内\n *\n * @return  String          类似#ff00ff\n * @param r\n * @param g\n * @param b\n */\nexport function rgbToHex(r: number, g: number, b: number) &#123;\n  // tslint:disable-next-line:no-bitwise\n  const hex = ((r &lt;&lt; 16) | (g &lt;&lt; 8) | b).toString(16);\n  return '#' + new Array(Math.abs(hex.length - 7)).join('0') + hex;\n&#125;\n\n/**\n * Transform a HEX color to its RGB representation\n * @param &#123;string&#125; hex The color to transform\n * @returns The RGB representation of the passed color\n */\nexport function hexToRGB(hex: string) &#123;\n  let sHex = hex.toLowerCase();\n  if (isHexColor(hex)) &#123;\n    if (sHex.length === 4) &#123;\n      let sColorNew = '#';\n      for (let i = 1; i &lt; 4; i += 1) &#123;\n        sColorNew += sHex.slice(i, i + 1).concat(sHex.slice(i, i + 1));\n      &#125;\n      sHex = sColorNew;\n    &#125;\n    const sColorChange: number[] = [];\n    for (let i = 1; i &lt; 7; i += 2) &#123;\n      sColorChange.push(parseInt('0x' + sHex.slice(i, i + 2)));\n    &#125;\n    return 'RGB(' + sColorChange.join(',') + ')';\n  &#125;\n  return sHex;\n&#125;\n\nexport function colorIsDark(color: string) &#123;\n  if (!isHexColor(color)) return;\n  const [r, g, b] = hexToRGB(color)\n    .replace(/(?:\\(|\\)|rgb|RGB)*/g, '')\n    .split(',')\n    .map((item) =&gt; Number(item));\n  return r * 0.299 + g * 0.578 + b * 0.114 &lt; 192;\n&#125;\n\n/**\n * Darkens a HEX color given the passed percentage\n * @param &#123;string&#125; color The color to process\n * @param &#123;number&#125; amount The amount to change the color by\n * @returns &#123;string&#125; The HEX representation of the processed color\n */\nexport function darken(color: string, amount: number) &#123;\n  color = color.indexOf('#') &gt;= 0 ? color.substring(1, color.length) : color;\n  amount = Math.trunc((255 * amount) / 100);\n  return `#$&#123;subtractLight(color.substring(0, 2), amount)&#125;$&#123;subtractLight(\n    color.substring(2, 4),\n    amount,\n  )&#125;$&#123;subtractLight(color.substring(4, 6), amount)&#125;`;\n&#125;\n\n/**\n * Lightens a 6 char HEX color according to the passed percentage\n * @param &#123;string&#125; color The color to change\n * @param &#123;number&#125; amount The amount to change the color by\n * @returns &#123;string&#125; The processed color represented as HEX\n */\nexport function lighten(color: string, amount: number) &#123;\n  color = color.indexOf('#') &gt;= 0 ? color.substring(1, color.length) : color;\n  amount = Math.trunc((255 * amount) / 100);\n  return `#$&#123;addLight(color.substring(0, 2), amount)&#125;$&#123;addLight(\n    color.substring(2, 4),\n    amount,\n  )&#125;$&#123;addLight(color.substring(4, 6), amount)&#125;`;\n&#125;\n\n/* Suma el porcentaje indicado a un color (RR, GG o BB) hexadecimal para aclararlo */\n/**\n * Sums the passed percentage to the R, G or B of a HEX color\n * @param &#123;string&#125; color The color to change\n * @param &#123;number&#125; amount The amount to change the color by\n * @returns &#123;string&#125; The processed part of the color\n */\nfunction addLight(color: string, amount: number) &#123;\n  const cc = parseInt(color, 16) + amount;\n  const c = cc &gt; 255 ? 255 : cc;\n  return c.toString(16).length &gt; 1 ? c.toString(16) : `0$&#123;c.toString(16)&#125;`;\n&#125;\n\n/**\n * Calculates luminance of an rgb color\n * @param &#123;number&#125; r red\n * @param &#123;number&#125; g green\n * @param &#123;number&#125; b blue\n */\nfunction luminanace(r: number, g: number, b: number) &#123;\n  const a = [r, g, b].map((v) =&gt; &#123;\n    v /= 255;\n    return v &lt;= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\n  &#125;);\n  return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n&#125;\n\n/**\n * Calculates contrast between two rgb colors\n * @param &#123;string&#125; rgb1 rgb color 1\n * @param &#123;string&#125; rgb2 rgb color 2\n */\nfunction contrast(rgb1: string[], rgb2: number[]) &#123;\n  return (\n    (luminanace(~~rgb1[0], ~~rgb1[1], ~~rgb1[2]) + 0.05) /\n    (luminanace(rgb2[0], rgb2[1], rgb2[2]) + 0.05)\n  );\n&#125;\n\n/**\n * Determines what the best text color is (black or white) based con the contrast with the background\n * @param hexColor - Last selected color by the user\n */\nexport function calculateBestTextColor(hexColor: string) &#123;\n  const rgbColor = hexToRGB(hexColor.substring(1));\n  const contrastWithBlack = contrast(rgbColor.split(','), [0, 0, 0]);\n\n  return contrastWithBlack &gt;= 12 ? '#000000' : '#FFFFFF';\n&#125;\n\n/**\n * Subtracts the indicated percentage to the R, G or B of a HEX color\n * @param &#123;string&#125; color The color to change\n * @param &#123;number&#125; amount The amount to change the color by\n * @returns &#123;string&#125; The processed part of the color\n */\nfunction subtractLight(color: string, amount: number) &#123;\n  const cc = parseInt(color, 16) - amount;\n  const c = cc &lt; 0 ? 0 : cc;\n  return c.toString(16).length &gt; 1 ? c.toString(16) : `0$&#123;c.toString(16)&#125;`;\n&#125;\n\n</code></pre>\n<pre><code>    - updateSidebarBgColor  修改侧边栏颜色 原理同上\n</code></pre>\n<p>以上大概有几个关键点：</p>\n<ol>\n<li>充分利用 less 的用法\n<ul>\n<li>条件语句</li>\n<li>动态前缀变量名</li>\n</ul>\n</li>\n<li>利用 js 来修改原生 css 变量的颜色，同时计算悬浮颜色</li>\n<li>项目中大部分样式类名以前缀方式定义，主 less 中定义了一个 vben 为 namespace，在 less 中作为全局变量；而 designSetting 中定义了 prefixCls 在 ts 中作为全局变量。 他们存在这对应关系，因此需要同时修改才能起作用。</li>\n</ol>\n<h2 id=\"导航栏模式切换\"><a class=\"markdownIt-Anchor\" href=\"#导航栏模式切换\">#</a> 导航栏模式切换</h2>\n<blockquote>\n<p>导航栏模式分为了四种：</p>\n</blockquote>\n<p><img data-src=\"https://secure2.wostatic.cn/static/sPjnd9xQ7suquNPauh5Qqw/image.png?auth_key=1684196309-2o96KrtYmowc5t254R8edZ-0-bbe91f85e3201ce1060d94391f94427b\" alt=\"\"></p>\n<ol>\n<li>左边可折叠菜单，右边上部面包屑，下部内容</li>\n<li>上下布局，上部面包屑，下面左边菜单右边内容</li>\n<li>上下布局，上面菜单，下面内容</li>\n<li>左右布局，左边菜单点击展开子目录，右上方面包屑，下方内容</li>\n</ol>\n<p>右边的样式选项都是通过自定义的 Picker 组件来实现的，导航栏模式选择的是 TypePicker 组件，传入的方法是 baseHandler:</p>\n<pre><code class=\"language-Vue\"> &lt;TypePicker\n    menuTypeList=&#123;menuTypeList&#125;\n    handler=&#123;(item: typeof menuTypeList[0]) =&gt; &#123;\n      baseHandler(HandlerEnum.CHANGE_LAYOUT, &#123;\n        mode: item.mode,\n        type: item.type,\n        split: unref(getIsHorizontal) ? false : undefined,\n      &#125;);\n    &#125;&#125;\n    def=&#123;unref(getMenuType)&#125;\n  /&gt;\n</code></pre>\n<p>其中 menuTypeList 表示上方提到的四种模式，其定义如下：</p>\n<pre><code class=\"language-TypeScript\">export const menuTypeList = [\n  &#123;\n    title: t('layout.setting.menuTypeSidebar'),\n    mode: MenuModeEnum.INLINE,\n    type: MenuTypeEnum.SIDEBAR,\n  &#125;,\n  &#123;\n    title: t('layout.setting.menuTypeMix'),\n    mode: MenuModeEnum.INLINE,\n    type: MenuTypeEnum.MIX,\n  &#125;,\n\n  &#123;\n    title: t('layout.setting.menuTypeTopMenu'),\n    mode: MenuModeEnum.HORIZONTAL,\n    type: MenuTypeEnum.TOP_MENU,\n  &#125;,\n  &#123;\n    title: t('layout.setting.menuTypeMixSidebar'),\n    mode: MenuModeEnum.INLINE,\n    type: MenuTypeEnum.MIX_SIDEBAR,\n  &#125;,\n];\n</code></pre>\n<blockquote>\n<p>ps: 由样式定义来看，less 支持不同状态下，class 后面拼接字符串的样式，比如 &amp;–active</p>\n</blockquote>\n<p>调用 handler 函数：</p>\n<ol>\n<li>获取 appStore 配置信息</li>\n<li>根据传来的 mode 和 type 生成新的 menuSetting</li>\n<li>将新的配置更新到 pinia 全局配置中</li>\n<li>更新来的配置几乎每一个属性都封装为一个 computed</li>\n</ol>\n<pre><code class=\"language-TypeScript\">export interface MenuSetting &#123;\n  bgColor: string;\n  fixed: boolean;\n  collapsed: boolean;\n  siderHidden: boolean;\n  canDrag: boolean;\n  show: boolean;\n  hidden: boolean;\n  split: boolean;\n  menuWidth: number;\n  mode: MenuModeEnum;\n  type: MenuTypeEnum;\n  theme: ThemeEnum;\n  topMenuAlign: 'start' | 'center' | 'end';\n  trigger: TriggerEnum;\n  accordion: boolean;\n  closeMixSidebarOnChange: boolean;\n  collapsedShowTitle: boolean;\n  mixSideTrigger: MixSidebarTriggerEnum;\n  mixSideFixed: boolean;\n&#125;\n\n</code></pre>\n<p>全都定义在 useMenuSetting.ts 中，这是一个<strong>自定义 hook</strong></p>\n<h2 id=\"系统主题切换\"><a class=\"markdownIt-Anchor\" href=\"#系统主题切换\">#</a> 系统主题切换</h2>\n<p>自定义组件 ThemeColorPicker 实现，包含三个 prop</p>\n<ol>\n<li>颜色列表</li>\n<li>默认颜色 通过 getThemeColor 计算属性获取（真实来源自 pinia 中存储的 themeColor）** 默认值都配置在 src/projectSetting.ts 下面 **</li>\n<li>event，表示事件 ID</li>\n</ol>\n<p>通过点击事件，调用 baseHandle 修改全局配置；</p>\n<p>调用 generateColors 方法生成一组颜色，这组颜色的计算可以参考：</p>\n<pre><code class=\"language-TypeScript\">export function generateColors(&#123;\n  color = primaryColor,\n  mixLighten,\n  mixDarken,\n  tinycolor,\n&#125;: GenerateColorsParams) &#123;\n  const arr = new Array(19).fill(0);\n  const lightens = arr.map((_t, i) =&gt; &#123;\n    return mixLighten(color, i / 5);\n  &#125;);\n\n  const darkens = arr.map((_t, i) =&gt; &#123;\n    return mixDarken(color, i / 5);\n  &#125;);\n\n  const alphaColors = arr.map((_t, i) =&gt; &#123;\n    return tinycolor(color)\n      .setAlpha(i / 20)\n      .toRgbString();\n  &#125;);\n\n  const shortAlphaColors = alphaColors.map((item) =&gt; item.replace(/\\s/g, '').replace(/0\\./g, '.'));\n\n  const tinycolorLightens = arr\n    .map((_t, i) =&gt; &#123;\n      return tinycolor(color)\n        .lighten(i * 5)\n        .toHexString();\n    &#125;)\n    .filter((item) =&gt; item !== '#ffffff');\n\n  const tinycolorDarkens = arr\n    .map((_t, i) =&gt; &#123;\n      return tinycolor(color)\n        .darken(i * 5)\n        .toHexString();\n    &#125;)\n    .filter((item) =&gt; item !== '#000000');\n  return [\n    ...lightens,\n    ...darkens,\n    ...alphaColors,\n    ...shortAlphaColors,\n    ...tinycolorDarkens,\n    ...tinycolorLightens,\n  ].filter((item) =&gt; !item.includes('-'));\n&#125;\n</code></pre>\n<p>然后利用 vite-plugin-theme 方法替换样式变量</p>\n<h2 id=\"顶栏主题\"><a class=\"markdownIt-Anchor\" href=\"#顶栏主题\">#</a> 顶栏主题</h2>\n<ul>\n<li>\n<p>自定义组件 ThemeColorPicker</p>\n</li>\n<li>\n<p>调用 updateHeaderBgColor 方法</p>\n<p>首先判断是否为夜间模式，夜间模式不生效；</p>\n<p>然后修改 css 变量–header-bg-color</p>\n<p>修改悬浮颜色： const hoverColor = lighten (color!, 6); 修改 css 变量</p>\n<p>修改 headerSetting： 判断选择的颜色是否属于暗色，然后结合当前是否为暗色模式，判断设置是否生效</p>\n</li>\n</ul>\n<h2 id=\"菜单主题\"><a class=\"markdownIt-Anchor\" href=\"#菜单主题\">#</a> 菜单主题</h2>\n<p>同顶栏主题</p>\n<h2 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h2>\n<blockquote>\n<p>vben 这个项目比较大，功能可以说是非常丰富，也可以说时非常冗杂，想要啃下来非常困难。 看到一个博客专门分析 vben 的可以参考：</p>\n</blockquote>\n",
            "tags": [
                "前端搬砖指南"
            ]
        },
        {
            "id": "https://fanlu.top/2023/05/15/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-01/",
            "url": "https://fanlu.top/2023/05/15/%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E5%91%A8%E5%88%8A-01/",
            "title": "鸡毛蒜皮周刊-01",
            "date_published": "2023-05-15T14:53:53.000Z",
            "content_html": "<h2 id=\"人类群星闪耀时\"><a class=\"markdownIt-Anchor\" href=\"#人类群星闪耀时\">#</a> 人类群星闪耀时</h2>\n<p>作者茨威格选择了一些很有意思的历史时间进行文学叙述，文笔确实很好。 但是作为一个历史” 爱好者 “，始终无法相信这样过度的文学描写，这样总会导致历史失真。</p>\n<h2 id=\"家里的wifi\"><a class=\"markdownIt-Anchor\" href=\"#家里的wifi\">#</a> 家里的 wifi</h2>\n<p>上海电信默认光猫是路由模式，又接了一个小米路由器，网速总是不稳定，这周找师傅来改成了桥接模式，需要电信远程下发数据还挺麻烦。 但是改完之后，室内的台式机（当时装修脑子抽，没给台式机留网口），网络还是一般，怀疑是主板网卡的问题，于是买了一个绿联的即插网卡，插上搞定！</p>\n<h2 id=\"chrome插件\"><a class=\"markdownIt-Anchor\" href=\"#chrome插件\">#</a> chrome 插件</h2>\n<p>最近对 chrome 插件开发感兴趣。于是琢磨着写个小项目试试能做点啥。于是考虑做个统计网页浏览时间的小应用。简单来说，有两个步骤，</p>\n<ol>\n<li>获取到当前标签页的地址</li>\n<li>切换标签页时重新进行计时<br>\n网上的插件开发教程写的还行，但是对于 api 的教程太少了。于是找到了一个现成的插件项目叫做 “网费很贵”，对于我想要的功能它已经做的很完整了。于是扒了下它的源码【<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NoZWVwemgvdGltZXIvYmxvYi9tYWluL1JFQURNRS16aC5tZCVFMyU4MCU5MSVFMyU4MCU4Mg==\">https://github.com/sheepzh/timer/blob/main/README-zh.md】。</span> 项目代码十分优雅，一看就能甩我好几年的功力。<br>\n找到了几个关键 api：</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>chrome<span class=\"token punctuation\">.</span>tabs<span class=\"token punctuation\">.</span>onActivated<span class=\"token punctuation\">.</span>addListener  <span class=\"token comment\">// 添加切换 tab 的监听</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>chrome<span class=\"token punctuation\">.</span>browser<span class=\"token punctuation\">.</span>setBadgeText  <span class=\"token comment\">// 修改插件图标上的文字</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>chrome<span class=\"token punctuation\">.</span>tabs<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>tabId<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>tab<span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 根据 tabID 获取到标签的信息</span></pre></td></tr></table></figure><p>代码会放到 github 上。</p>\n<h2 id=\"docxtemplater\"><a class=\"markdownIt-Anchor\" href=\"#docxtemplater\">#</a> docxtemplater</h2>\n<p>工作中用到了前端导出 word 的操作，chatGpt 给我推荐了这个库<br>\n！[[Pasted image 20230228121250.png]]<br>\n 使用方法可以参照：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDk0MTM5NDEzMjQ4MDgxOTI4\">前端使用 docxtemplater 导出 word 文档最佳实践 - 掘金 (juejin.cn)</span><br>\n 这个库的地址在：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW4teG1sLXRlbXBsYXRpbmcvZG9jeHRlbXBsYXRlcg==\">open-xml-templating/docxtemplater: Generate docx, pptx, and xlsx from templates (Word, Powerpoint and Excel documents), from Node.js, the Browser and the command line / Demo: https://www.docxtemplater.com/demo. #docx #office #generator #templating #report #json #generate #generation #template #create #pptx #docx #xlsx #react #vuejs #angularjs #browser #typescript #image #html #table #chart (github.com)</span><br>\n 使用下来，感觉很强大的一个库，支持模板渲染、循环数据渲染、表格循环渲染。</p>\n<h2 id=\"诡秘之主\"><a class=\"markdownIt-Anchor\" href=\"#诡秘之主\">#</a> 诡秘之主</h2>\n<p>这是一个在各种排名都很高的网文，我看了几十章，实在看不下去了，节奏太慢了，看网文的目的是放松和休息大脑，实在不想费劲阅读。<br>\n但是打开起点，看到它在第一名，还是继续看下去吧。</p>\n<h2 id=\"ppchart\"><a class=\"markdownIt-Anchor\" href=\"#ppchart\">#</a> PPChart</h2>\n<p>用 echarts 总觉得调样式很麻烦，这个网站不错，可以看到不少好看的效果，以后可以用来参考（拷贝）。😲<br>\n<span class=\"exturl\" data-url=\"aHR0cDovL3BwY2hhcnQuY29tLyMv\">PPChart - 让图表更简单</span><br>\n！[[Pasted image 20230301164049.png]]<br>\n 同类型的网站还有：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWFrZWFwaWUuY24vZWNoYXJ0c19jYXRlZ29yeS9zZXJpZXMtYmFy\">series-bar 柱状图 - makeapie echarts 图表可视化案例</span></p>\n<h2 id=\"nas赚钱\"><a class=\"markdownIt-Anchor\" href=\"#nas赚钱\">#</a> nas 赚钱</h2>\n<p>在极空间 z4s 上打开了迅雷的网心云插件，用闲置的带宽做 pcdn 赚钱，目前几天下来，每天 5 毛钱。可惜没有公网 ip 不然应该会高一点，现在好像还不够 nas 的电费。</p>\n",
            "tags": [
                "鸡毛蒜皮周刊"
            ]
        }
    ]
}